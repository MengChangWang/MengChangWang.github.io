<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer Science</title>
    <link>https://MengChangWang.github.io/</link>
    
    <atom:link href="https://mengchangwang.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>欢迎来到我的博客</description>
    <pubDate>Sun, 04 May 2025 06:48:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>《汇编语言》王爽----实验七</title>
      <link>https://mengchangwang.github.io/2025/05/04/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E3%80%8B%E7%8E%8B%E7%88%BD-%E5%AE%9E%E9%AA%8C%E4%B8%83/</link>
      <guid>https://mengchangwang.github.io/2025/05/04/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E3%80%8B%E7%8E%8B%E7%88%BD-%E5%AE%9E%E9%AA%8C%E4%B8%83/</guid>
      <pubDate>Sun, 04 May 2025 06:28:01 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;《汇编语言》王爽(第四版)第八章 实验7习题解答&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>《汇编语言》王爽(第四版)第八章 实验7习题解答</p></blockquote><span id="more"></span><h4 id="题目要求">题目要求</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">data segment</span><br><span class="line">    ;年份</span><br><span class="line">    db &#x27;1975&#x27;, &#x27;1976&#x27;, &#x27;1977&#x27;, &#x27;1978&#x27;, &#x27;1979&#x27;, &#x27;1980&#x27;, &#x27;1981&#x27;, &#x27;1982&#x27;, &#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;, &#x27;1985&#x27;, &#x27;1986&#x27;, &#x27;1987&#x27;, &#x27;1988&#x27;, &#x27;1989&#x27;, &#x27;1990&#x27;, &#x27;1991&#x27;, &#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;, &#x27;1994&#x27;, &#x27;1995&#x27;</span><br><span class="line">    ;收入</span><br><span class="line">    dd 16, 22, 382, 1356, 2390, 8000, 16000, 24486, 50065, 97479, 140417, 197514</span><br><span class="line">    dd 345980, 590827, 803530, 1183000, 1843000, 2759000, 3753000, 4649000, 5937000</span><br><span class="line">    ;员工</span><br><span class="line">    dw 3, 7, 9, 13, 28, 38, 130, 220, 476, 778, 1001, 1442, 2258, 2793, 4037, 5635, 8226</span><br><span class="line">    dw 11542, 14430, 15257, 17800</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year sumn ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure><p>将 data 段中的数据按如下格式写入到 table 段中，并计算 21 年中的人均收入 (取整), 结果也按照下面的格式保存在 table 段中</p><h4 id="提示">提示</h4><p>可将data段中的数据看成是多个数组,而将table中的数据看成是一个结构型数据的数组,每个结构型数据中包含多个数据项。</p><p>可用di定位table段中对应的存储单元,用idata定位数据项,用si定位data段中的每个元素</p><p><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20250504144734255.png" alt="image-20250504144734255"></p><h4 id="解答代码">解答代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ss:stack,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    ;年份</span><br><span class="line">    db &#x27;1975&#x27;, &#x27;1976&#x27;, &#x27;1977&#x27;, &#x27;1978&#x27;, &#x27;1979&#x27;, &#x27;1980&#x27;, &#x27;1981&#x27;, &#x27;1982&#x27;, &#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;, &#x27;1985&#x27;, &#x27;1986&#x27;, &#x27;1987&#x27;, &#x27;1988&#x27;, &#x27;1989&#x27;, &#x27;1990&#x27;, &#x27;1991&#x27;, &#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;, &#x27;1994&#x27;, &#x27;1995&#x27;</span><br><span class="line">    ;收入</span><br><span class="line">    dd 16, 22, 382, 1356, 2390, 8000, 16000, 24486, 50065, 97479, 140417, 197514</span><br><span class="line">    dd 345980, 590827, 803530, 1183000, 1843000, 2759000, 3753000, 4649000, 5937000</span><br><span class="line">    ;员工</span><br><span class="line">    dw 3, 7, 9, 13, 28, 38, 130, 220, 476, 778, 1001, 1442, 2258, 2793, 4037, 5635, 8226</span><br><span class="line">    dw 11542, 14430, 15257, 17800</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year sumn ne ?? &#x27;)</span><br><span class="line">table ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">dw 8 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">main:</span><br><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,table</span><br><span class="line">mov es,ax</span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,10H</span><br><span class="line"></span><br><span class="line">;复制年份到table中</span><br><span class="line">mov si,0</span><br><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">s1:mov ax,ds:[si]</span><br><span class="line">mov es:[di],ax</span><br><span class="line">mov ax,ds:[si+2]</span><br><span class="line">mov es:[di+2],ax</span><br><span class="line">mov al,20H ;存储空格到table中的对应位置</span><br><span class="line">mov es:[di+4],al</span><br><span class="line"></span><br><span class="line">add si,4</span><br><span class="line">add di,10H</span><br><span class="line">loop s1</span><br><span class="line"></span><br><span class="line">;复制收入到table中</span><br><span class="line">mov si,84</span><br><span class="line">mov di,5</span><br><span class="line">mov cx,21</span><br><span class="line">s2:mov ax,ds:[si]</span><br><span class="line">mov es:[di],ax</span><br><span class="line">mov ax,ds:[si+2]</span><br><span class="line">mov es:[di+2],ax</span><br><span class="line">mov al,20H</span><br><span class="line">mov es:[di+4],al</span><br><span class="line"></span><br><span class="line">add si,4</span><br><span class="line">add di,10H</span><br><span class="line">loop s2</span><br><span class="line"></span><br><span class="line">;复制人数到table中</span><br><span class="line">mov si,168</span><br><span class="line">mov di,10</span><br><span class="line">mov cx,21</span><br><span class="line">s3:mov ax,ds:[si]</span><br><span class="line">mov es:[di],ax</span><br><span class="line">mov al,20H</span><br><span class="line">mov es:[di+2],al</span><br><span class="line"></span><br><span class="line">add si,2</span><br><span class="line">add di,10H</span><br><span class="line">loop s3</span><br><span class="line"></span><br><span class="line">;计算人均收入</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,21</span><br><span class="line">s4:mov ax,es:[bx+5] ;除数是dw,16位,所以被除数应该是32位,使用DX:AX来存储</span><br><span class="line">mov dx,es:[bx+7]</span><br><span class="line">div word ptr es:[bx+10];显式地告诉编译器,除数是16位,字型</span><br><span class="line">mov es:[bx+13],ax;商存储在ax中,余数存储在dx中</span><br><span class="line">mov al,20H</span><br><span class="line">mov es:[bx+15],al</span><br><span class="line"></span><br><span class="line">add bx,10H</span><br><span class="line">loop s4</span><br><span class="line"></span><br><span class="line">mov ax,4c00H</span><br><span class="line">int 21H</span><br><span class="line">code ends</span><br><span class="line">end main</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/">汇编语言</category>
      
      
      
      <comments>https://mengchangwang.github.io/2025/05/04/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E3%80%8B%E7%8E%8B%E7%88%BD-%E5%AE%9E%E9%AA%8C%E4%B8%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数据结构期末复习</title>
      <link>https://mengchangwang.github.io/2025/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9C%9F%E6%9C%AB%E8%80%83%E7%BA%B2%E5%A4%8D%E4%B9%A0/</link>
      <guid>https://mengchangwang.github.io/2025/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9C%9F%E6%9C%AB%E8%80%83%E7%BA%B2%E5%A4%8D%E4%B9%A0/</guid>
      <pubDate>Wed, 01 Jan 2025 04:07:52 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;数据结构的期末复习考纲&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>数据结构的期末复习考纲</p></blockquote><span id="more"></span><h1>数据结构期末考纲</h1><h2 id="顺序表和链表的类型定义">顺序表和链表的类型定义</h2><ul class="lvl-0"><li class="lvl-2"><p>**顺序表:**用一组<mark>地址连续</mark>的存储单元<mark>依次</mark>存放线性表中的所有元素, 元素的存储位置与逻辑位置是一一对应关系</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SeqList</span>&#123;</span><br><span class="line">    T data[N];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="built_in">SeqList</span>():<span class="built_in">length</span>(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">getCapacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> IntSeqList = SeqList&lt;<span class="type">int</span>,<span class="number">100</span>&gt;;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>链表:</strong> 用一组地址非连续的存储单元依次存放线性表中的所有元素, 元素间的先后关系利用指针来表示</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    T data;</span><br><span class="line">    Node* next;</span><br><span class="line">    <span class="built_in">Node</span>&lt;T&gt;() : <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> LinkList = Node&lt;<span class="type">int</span>&gt;*;</span><br></pre></td></tr></table></figure><h2 id="将两个有序的顺序表-链表-合并为一个有序的顺序表-链表-分析合并操作的复杂度">将两个有序的顺序表(链表)合并为一个有序的顺序表(链表) 分析合并操作的复杂度</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>顺序表</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IntSeqList <span class="title">mergeSeqList</span><span class="params">(IntSeqList&amp; s1, IntSeqList&amp; s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s1 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        s1 = s2;</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s2 == <span class="literal">NULL</span>) <span class="keyword">return</span> s1;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> size1 = s1.length;</span><br><span class="line">    <span class="type">int</span> size2 = s2.length;</span><br><span class="line">    <span class="type">int</span> total_size = size1 + size2;</span><br><span class="line"></span><br><span class="line">    IntSeqList new_seqlist;</span><br><span class="line">    new_seqlist.length = total_size;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> index1 = <span class="number">0</span>;<span class="type">int</span> index2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index1 &lt; size1 &amp;&amp; index2 &lt; size2)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.data[index1]&lt;s2.data[index2])  &#123; new_seqlist.data[k] = s1.data[index1]; index1++;&#125;</span><br><span class="line">        <span class="keyword">else</span>  &#123; new_seqlist.data[k] = s2.data[index2]; index2++; &#125;</span><br><span class="line">        k++;         </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(index1 &lt; size1 &amp;&amp; index2 == size2)&#123;</span><br><span class="line">       <span class="keyword">while</span>(index1 &lt; size1)&#123;</span><br><span class="line">            new_seqlist.data[k] = s1.data[index1];</span><br><span class="line">            k++;</span><br><span class="line">            index1++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(index1 == size1 &amp;&amp; index2 &lt; size2)&#123;</span><br><span class="line">        <span class="keyword">while</span>(index2 &lt; size2)&#123;</span><br><span class="line">            new_seqlist.data[k] = s2.data[index2];</span><br><span class="line">            k++;</span><br><span class="line">            index2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">return</span> new_seqlist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**时间复杂度：**O(n + m)</p><p>**空间复杂度：**O(n + m)</p><ul class="lvl-0"><li class="lvl-2"><p><strong>链表</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;<span class="type">int</span>&gt;* <span class="title">mergeLinkedList</span><span class="params">(LinkList&amp; l1, LinkList&amp; l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        l1 = l2;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">    LinkList cur = l1;</span><br><span class="line"></span><br><span class="line">    LinkList temp1 = l1-&gt;next; LinkList temp2 = l2-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (temp1 &amp;&amp; temp2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp1-&gt;data &lt; temp2-&gt;data) &#123;</span><br><span class="line">            cur-&gt;next = temp1;</span><br><span class="line">            temp1 = temp1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cur-&gt;next = temp2;</span><br><span class="line">            temp2 = temp2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cur-&gt;next = temp1 ? temp1 : temp2;</span><br><span class="line">    <span class="keyword">delete</span> l2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**时间复杂度：**O(n + m)</p><p>**空间复杂度：**O(1)</p><h2 id="在链表-顺序表-的某个节点后插入一个节点">在链表(顺序表)的某个节点后插入一个节点</h2><p><strong>链表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertNode</span><span class="params">(LinkList l, <span class="type">int</span> index, T data)</span> </span>&#123;</span><br><span class="line">    LinkList cur = l;</span><br><span class="line">    <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;T&gt;* new_node = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">    new_node-&gt;data = data;</span><br><span class="line">    new_node-&gt;next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = new_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>顺序表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertNode</span><span class="params">(IntSeqList&amp; s, <span class="type">int</span> index, T data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; s.length &amp;&amp; s.length + <span class="number">1</span> &gt; s.<span class="built_in">getCapacity</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            s.data[i + <span class="number">1</span>] = s.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s.data[<span class="number">0</span>] = data;</span><br><span class="line">        s.length++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = s.length - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">        s.data[i + <span class="number">1</span>] = s.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    s.data[index] = data;</span><br><span class="line">    s.length++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="将一个链表-顺序表-进行倒置-并分析倒置操作的复杂度">将一个链表(顺序表)进行倒置 并分析倒置操作的复杂度</h2><p><strong>链表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseLL</span><span class="params">(LinkList l)</span></span>&#123;</span><br><span class="line">    LinkList pre = <span class="literal">nullptr</span>;</span><br><span class="line">    LinkList cur = l;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        LinkList temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    l = pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**时间复杂度：**O(n)</p><p>**空间复杂度：**O(1)</p><p><strong>顺序表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseSeq</span><span class="params">(IntSeqList&amp; s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>; <span class="type">int</span> j = s.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="type">int</span> temp  = s.data[j];</span><br><span class="line">        s.data[j] = s.data[i];</span><br><span class="line">        s.data[i] = temp;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**时间复杂度：**O(n)</p><p>**空间复杂度：**O(1)</p><h2 id="无向图的链接表表示法和邻接矩阵表示法">无向图的链接表表示法和邻接矩阵表示法</h2><p><strong>邻接矩阵表示法:</strong> 利用二维数组来表示一个图,二维数组中的每一个元素表示相应的两个顶点之间的关系</p><p>​     无向图的邻接矩阵为对称矩阵</p><p><strong>链接表表示法:</strong> 将图的每一个顶点的邻接点存放在一个链表中 每个顶点对应一条链表,所有的头节点存放在一个数组中</p><h2 id="利用DFS或BFS求一个图的连通分量数">利用DFS或BFS求一个图的连通分量数</h2><p><strong>DFS</strong></p><p>递归版(图利用<em>邻接矩阵</em>来表示)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; isConnected,vector&lt;<span class="type">int</span>&gt;&amp; visited,<span class="type">int</span> row)</span></span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;isConnected.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(isConnected[row][i]&amp;&amp;!visited[i])&#123;</span><br><span class="line">            visited[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">DFS</span>(isConnected,visited,i);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">visited</span><span class="params">(isConnected.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;isConnected.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">            <span class="built_in">DFS</span>(isConnected,visited,i);</span><br><span class="line">            num++;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">visited</span><span class="params">(isConnected.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; isConnected.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i]) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">while</span>(!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> temp = s.<span class="built_in">top</span>();</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                visited[temp] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; isConnected.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(isConnected[temp][j] &amp;&amp; !visited[j]) &#123;</span><br><span class="line">                        s.<span class="built_in">push</span>(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BFS</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">visited</span><span class="params">(isConnected.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; isConnected.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> temp = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                visited[temp] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; isConnected.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (isConnected[temp][j] &amp;&amp; !visited[j]) &#123;</span><br><span class="line">                       q.<span class="built_in">push</span>(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="利用Floyd算法求图的任意两点的最短距离，图的传递闭包-Floyd-Warshall">利用Floyd算法求图的任意两点的最短距离，图的传递闭包(Floyd-Warshall)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最短距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    grid = matrix;</span><br><span class="line">    <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n;K++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;j++)&#123;</span><br><span class="line">                grid[i][j]=<span class="built_in">min</span>(grid[i][j],grid[i][k]+grid[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传递闭包(使用前需将矩阵转换为使用0和1表达的矩阵)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floydWarshall</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                matrix[i][j] |= matrix[i][k] &amp; matrix[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断两个左右链表表示的二叉树是否等价-并分析时间复杂度">判断两个左右链表表示的二叉树是否等价 并分析时间复杂度</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">nullptr</span> &amp;&amp; q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">nullptr</span> || q == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;val != q-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isSameTree</span>(p-&gt;left, q-&gt;left) &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;right, q-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**时间复杂度：**O(n)</p><h2 id="将一个整数序列转化为大顶堆-小顶堆-的过程描述">将一个整数序列转化为大顶堆(小顶堆)的过程描述</h2><p><strong>大顶堆</strong></p><ul class="lvl-0"><li class="lvl-2"><p>将此整数序列看作一棵完全二叉树的数组形式</p></li><li class="lvl-2"><p>从最后一个非叶节点开始进行下沉操作,保证父节点大于子节点,使其堆化</p></li><li class="lvl-2"><p>倒序遍历每个节点,重复上述操作 直至根节点</p></li></ul><h2 id="删除堆顶-大顶堆或小顶堆-的过程描述">删除堆顶(大顶堆或小顶堆)的过程描述</h2><ul class="lvl-0"><li class="lvl-2"><p>将堆顶元素与堆中最后一个元素互换</p></li><li class="lvl-2"><p>删除最后一个元素</p></li><li class="lvl-2"><p>从堆顶元素开始,从顶至底进行下沉操作使其堆化</p></li></ul><h2 id="构建哈夫曼树的过程-并计算带权路径长度">构建哈夫曼树的过程, 并计算带权路径长度</h2><p>假设给了n个元素</p><ul class="lvl-0"><li class="lvl-2"><p>将这n个元素看作n棵只有一个节点的二叉树,他们构成了森林F</p></li><li class="lvl-2"><p>从森林F中选择两个权值最小的节点(树)构成一个新树, 新树的根节点的权值为这两个节点权值的和</p></li><li class="lvl-2"><p>将这颗新树加入到森林F中 并删除F中的那两个被合并的节点</p></li><li class="lvl-2"><p>重复上述过程 直至森林中只剩下一个树 该树即为哈夫曼树</p></li></ul><p>**带权路径长度:**每个叶节点的权值与其到根节点的路径长度的乘积之和</p><h2 id="利用栈求逆波兰表达式的值">利用栈求逆波兰表达式的值</h2><p>假设该逆波兰表达式符合规范</p><ul class="lvl-0"><li class="lvl-2"><p>将该表达式中的元素依次遍历</p></li><li class="lvl-2"><p>如果该元素是操作数 那么压入栈中 继续遍历下一个元素</p></li><li class="lvl-2"><p>如果该元素是操作符 那么从栈中弹出所需数量的元素进行计算 并将计算结果压入栈中</p></li><li class="lvl-2"><p>重复上述操作 直至遍历玩表达式中所有元素 栈顶元素即为该表达式的结果</p></li></ul><h2 id="最小生成树的构建方法">最小生成树的构建方法</h2><p><strong>Prim</strong></p><ul class="lvl-0"><li class="lvl-2"><p>构造一个名为minDist的数组,用来记录每个节点距离生成树的最短距离,长度为n,n为顶点的数量</p></li><li class="lvl-2"><p>构造一个名为visited的数组,用来记录哪些节点已经被添加到最小生成树中,长度为n</p></li><li class="lvl-2"><p>随机选择一个节点作为第一个节点加入到最小生成树中并将其在visited数组中标记为true</p></li><li class="lvl-2"><p>更新minDist数组 即更新未被visited数组标记的节点到生成树的距离</p></li><li class="lvl-2"><p>选择minDist数组中值最小且未被visited数组标记的节点加入生成树 并将该节点标记为true</p></li><li class="lvl-2"><p>重复上述过程n-1次即可完成构建</p></li></ul><p><strong>Kruskal</strong></p><ul class="lvl-0"><li class="lvl-2"><p>将图中的边按照权值由小到大进行排序</p></li><li class="lvl-2"><p>初始化并查集,使每个顶点自成一个集合</p></li><li class="lvl-2"><p>对排序后的边进行遍历</p></li><li class="lvl-2"><p>利用并查集判断该边的两个顶点是否在同一个集合中</p></li><li class="lvl-2"><p>如果在 则不能将此边加入生成树 否则会形成环</p></li><li class="lvl-2"><p>如果不在 则将此边加入生成树 并将这两个顶点所在的集合合并</p></li><li class="lvl-2"><p>重复上述过程 直至生成树中有n-1条边(n为顶点数目) 或遍历结束</p></li></ul><h2 id="利用Dijkstra求单源最短距离和最短路径-了解U-d和p的含义-如何根据p求到每一个顶点到源点的最短路径">利用Dijkstra求单源最短距离和最短路径,了解U d和p的含义;如何根据p求到每一个顶点到源点的最短路径</h2><p>**U:**已经求出与源点的最短距离的顶点的集合</p><p>**d:**用来存放顶点到源点最短距离的数组,d[i]代表顶点i到源点的最短距离</p><p>**p:**用来存放最短路径树中每个节点的父节点的数组,p[i]代表最短路径树中节点i的父节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getPath</span><span class="params">(<span class="type">int</span> p[N],<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==p[v])&#123;</span><br><span class="line">        cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getPath</span>(p,p[v]);</span><br><span class="line">    cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序和关键路径的求法">拓扑排序和关键路径的求法</h2><p><strong>拓扑排序</strong></p><ul class="lvl-0"><li class="lvl-2"><p>定义一个队列q,统计图中每一个顶点的入度,将入度为零的顶点加入队列q中</p></li><li class="lvl-2"><p>从队列q中取出一个顶点u,将其加入到拓扑序列中</p></li><li class="lvl-2"><p>遍历顶点u的所有出边,将这些相邻点的入度减一,若其入度变为零,则将其加入到队列q中</p></li><li class="lvl-2"><p>重复上述步骤,直至队列q为空</p></li><li class="lvl-2"><p>如果队列q为空时 仍有顶点未加入到拓扑序列中 说明该图存在环 不存在拓扑序列</p></li></ul><p><strong>关键路径</strong></p><ul class="lvl-0"><li class="lvl-2"><p>对图中各顶点进行拓扑排序，得到拓扑序列</p></li><li class="lvl-2"><p>按照拓扑序列的顺序 依次计算每个事件的最早发生时间</p></li><li class="lvl-2"><p>再根据每个事件的最早发生时间 求出每个活动的最早发生时间</p></li><li class="lvl-2"><p>按照逆拓扑序 依次计算每个事件的最晚发生时间</p></li><li class="lvl-2"><p>遍历每一个活动，计算其最早发生时间与最晚发生时间之差 若为零 则将该活动加入关键路径</p></li></ul><h2 id="二分查找及其复杂度分析">二分查找及其复杂度分析</h2><p>主要部分与插值查找相同 不同点为 mid = left+0.5*(right-left)</p><p>时间复杂度为 <strong>O(log n)</strong></p><p>空间复杂度为 <strong>O(1)</strong></p><h2 id="插值查找">插值查找</h2><ul class="lvl-0"><li class="lvl-2"><p>确定被查找目标所在的范围边界,左边界记为left,右边界记为right</p></li><li class="lvl-2"><p>设置查找点下标为 $mid=left+ (key-array[left]/array[right]-array[left])*(right-left)$</p></li><li class="lvl-2"><p>开始循环 保证left不大于right</p></li><li class="lvl-2"><p>判断以mid为下标的数组元素是否等于目标值</p></li><li class="lvl-2"><p>如果等于 则找到目标 退出循环</p></li><li class="lvl-2"><p>如果大于目标元素 则令right = mid - 1</p></li><li class="lvl-2"><p>如果小于目标元素 则另left = mid + 1</p></li><li class="lvl-2"><p>按照以上描述进行循环直至找到目标值 或不满足循环条件时退出循环</p></li></ul><p>时间复杂度是<strong>O(loglogN)</strong></p><p>当<mark>有序序列中的元素呈均匀分布时</mark>插值查找优于二分查找</p><h2 id="KMP算法">KMP算法</h2><p>令模式串为t 主串为s</p><ul class="lvl-0"><li class="lvl-2"><p>定义两个整数i，j 分别表示主串和模式串的下标，初始值设置为0</p></li><li class="lvl-2"><p>当j == -1 或 t[j] == s[i]时 i和j同时加一 即同时向后移动一位</p></li><li class="lvl-2"><p>如果t[j] != s[i]时 令j=next[j]</p></li><li class="lvl-2"><p>重复上述过程直至遍历完i主串或j遍历完模式串</p></li></ul><p><strong>next数组</strong></p><ul class="lvl-0"><li class="lvl-2"><p>使用整数j作为下标来遍历模式串</p></li><li class="lvl-2"><p>令next[j] = 第j位的公共最长真前后缀的长度 特别规定next[0]=-1</p></li></ul><p><strong>优化next数组</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在上一个方法求next数组的基础之上 在j遍历模式串s的过程中添加如下判断</p></li><li class="lvl-2"><p>判断 t[j]是否等于t[next[j]]</p></li><li class="lvl-2"><p>如果等于 则令next[j] = next[next[j]]</p></li></ul><h2 id="二叉查找树">二叉查找树</h2><p><strong>特点</strong></p><ul class="lvl-0"><li class="lvl-2"><p>对于根节点，若它的左右子树不为空, 则左子树中所有节点的值 &lt; 根节点的值 &lt; 右子树中所有节点的值</p></li><li class="lvl-2"><p>若它的左右子树都不为空,  则它的左右子树也分别为二叉查找树</p></li></ul><p><strong>构建二叉查找树</strong></p><ul class="lvl-0"><li class="lvl-2"><p>将序列的第一个元素作为二叉查找树的根节点</p></li><li class="lvl-2"><p>接着依次遍历序列中的剩余元素,并将该元素作为新节点</p></li><li class="lvl-2"><p>如果新节点的值小于当前节点的值，则新节点应插入到左子树中</p></li><li class="lvl-2"><p>如果新节点的值大于当前节点的值，则新节点应插入到右子树中</p></li><li class="lvl-2"><p>重复上两个步骤，直到找到合适的叶子位置, 将其插入树中</p></li><li class="lvl-2"><p>对序列中的每个元素进行如上操作直至遍历结束 至此二叉查找树构建完成</p></li></ul><h2 id="AVL树">AVL树</h2><p><strong>四种基本形式及对应变形操作</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>LL旋转</strong></p><p>假设节点A是失衡的节点，节点B是A的左子节点，节点C是B的右子节点</p><ul class="lvl-2"><li class="lvl-4"><p>B变为新的根节点。</p></li><li class="lvl-5"><p>A成为B的右子节点。</p></li><li class="lvl-4"><p>C（如果存在）成为A的左子节点</p></li></ul><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20250108161439866.png" alt="image-20250108161439866" style="zoom: 50%; float:left" ></li><li class="lvl-2"><p><strong>RR旋转</strong></p></li></ul><p>​与LL操作反之</p><ul class="lvl-0"><li class="lvl-2"><p><strong>LR旋转</strong></p></li></ul><p>​假设节点A是失衡的节点，节点B是A的左子节点</p><p>​首先对A的左子节点B进行RR旋转，然后对A进行LL旋转</p><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20250108161749530.png" alt="image-20250108161749530" style="zoom:50%;float:left" /><ul class="lvl-0"><li class="lvl-2"><p><strong>RL旋转</strong></p></li></ul><p>​与LR反之</p><p><strong>构建AVL树</strong></p><ul class="lvl-0"><li class="lvl-2"><p>将给定数据集的第一个元素作为AVL树的根节点</p></li><li class="lvl-2"><p>按照二叉查找树的方式插入新的节点</p></li><li class="lvl-2"><p>每次插入新节点后，更新该节点及其祖先节点的高度</p></li><li class="lvl-2"><p>在每次插入操作后，计算当前节点及其祖先节点的平衡因子（左子树高度减去右子树高度）。</p></li><li class="lvl-2"><p>如果平衡因子的绝对值大于1，则该节点失衡, 根据失衡节点的具体情况进行对应的旋转操作</p></li><li class="lvl-2"><p>重复上述过程 直至所有元素被添加到AVL树中</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/C/">C++</category>
      
      
      <comments>https://mengchangwang.github.io/2025/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9C%9F%E6%9C%AB%E8%80%83%E7%BA%B2%E5%A4%8D%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>书生大模型---微调</title>
      <link>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1-2/</link>
      <guid>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1-2/</guid>
      <pubDate>Sun, 29 Sep 2024 08:21:13 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;利用XTuner微调预训练模型&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>利用XTuner微调预训练模型</p></blockquote><span id="more"></span><h2 id="Lv1-XTuner微调大模型">Lv1-XTuner微调大模型</h2><h3 id="1-准备环境和依赖">1. <strong>准备环境和依赖</strong></h3><p>XTuner的运行依赖于一系列的库和工具，主要包括<code>transformers</code>、<code>torch</code>等深度学习框架。在开始之前，你需要确保安装好这些依赖：</p><ul class="lvl-0"><li class="lvl-2"><p>安装Python 3.8或更高版本。</p></li><li class="lvl-2"><p>安装基础依赖库：运行以下命令下载并安装依赖。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>确保你拥有兼容的GPU环境，以提高模型训练速度。如果使用的是NVIDIA GPU，安装CUDA和cuDNN并验证PyTorch的GPU支持。</p></li></ul><h3 id="2-加载预训练模型">2. <strong>加载预训练模型</strong></h3><p>XTuner的核心功能是对已有的预训练模型进行微调。通常情况下，大语言模型（如GPT、BERT等）已经具备强大的通用语言能力，但针对具体任务时需要进行额外的微调。</p><h4 id="选择模型：">选择模型：</h4><p>XTuner支持使用Hugging Face的<code>transformers</code>库来加载预训练模型。以下代码展示了如何加载GPT-2模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForCausalLM, AutoTokenizer</span><br><span class="line"></span><br><span class="line">model = AutoModelForCausalLM.from_pretrained(<span class="string">&quot;gpt2&quot;</span>)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(<span class="string">&quot;gpt2&quot;</span>)</span><br></pre></td></tr></table></figure><p>在实际操作中，你可以根据任务需求选择其他预训练模型，例如BERT、T5等。</p><h3 id="3-准备数据集">3. <strong>准备数据集</strong></h3><p>微调过程需要使用特定任务的数据集。XTuner支持常见的文本分类、生成、翻译等任务的数据集。你可以选择公开数据集（例如：SQuAD、GLUE、CoNLL等），也可以使用自定义数据。</p><h4 id="数据预处理：">数据预处理：</h4><ul class="lvl-0"><li class="lvl-2"><p>首先，将数据集整理为模型能够接受的格式。数据通常是输入（如文本）与目标标签（如类别、输出文本）组成的对。</p></li><li class="lvl-2"><p>对数据进行tokenization，即将文本数据转化为模型输入的token ID。Hugging Face的tokenizer能够自动完成这一步：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputs = tokenizer(<span class="string">&quot;This is a test sentence.&quot;</span>, return_tensors=<span class="string">&quot;pt&quot;</span>)</span><br></pre></td></tr></table></figure><p>你也可以使用<code>datasets</code>库轻松加载数据并进行tokenization:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"></span><br><span class="line">dataset = load_dataset(<span class="string">&#x27;your_dataset&#x27;</span>)</span><br><span class="line">tokenized_dataset = dataset.<span class="built_in">map</span>(<span class="keyword">lambda</span> e: tokenizer(e[<span class="string">&#x27;text&#x27;</span>], truncation=<span class="literal">True</span>, padding=<span class="string">&#x27;max_length&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-定义微调任务">4. <strong>定义微调任务</strong></h3><p>XTuner允许你根据不同的任务选择不同的模型结构和训练策略。一般来说，语言模型的最后一层需要调整为符合具体任务需求。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>文本分类</strong>：为BERT等模型添加一个分类器层（如线性层），用于预测标签。</p></li><li class="lvl-2"><p><strong>文本生成</strong>：GPT模型可以直接用于生成任务，只需定义损失函数。</p></li><li class="lvl-2"><p><strong>翻译任务</strong>：类似于T5等预训练模型，可以用于翻译任务，通过提供源文本与目标文本对进行训练。</p></li></ul><p>你可以根据任务需要自定义这些模型结构。</p><h3 id="5-配置训练参数">5. <strong>配置训练参数</strong></h3><p>XTuner提供了灵活的配置方式，可以通过配置文件或命令行参数指定训练的超参数。你需要调整如下超参数：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>学习率</strong>：通常设置在1e-5到5e-5之间，具体值依赖于任务和模型。</p></li><li class="lvl-2"><p><strong>批次大小</strong>：通常GPU内存较大时，批次大小可以设置得较大，推荐设置为16或32。</p></li><li class="lvl-2"><p><strong>训练轮数</strong>：通常选择2到5轮训练，过多的训练轮数可能导致过拟合。</p></li><li class="lvl-2"><p><strong>优化器</strong>：AdamW是最常见的优化器，它处理权重衰减问题并提高训练稳定性。</p></li></ul><h4 id="示例配置：">示例配置：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --model_name_or_path gpt2 --dataset your_dataset --learning_rate 2e-5 --batch_size 16 --num_train_epochs 3 --output_dir ./output</span><br></pre></td></tr></table></figure><h3 id="6-启动训练">6. <strong>启动训练</strong></h3><p>在设置完所有参数后，便可以使用XTuner开始训练。XTuner提供了一套自动化的训练流程，包含数据加载、模型构建、训练与评估等步骤。启动训练的典型命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --model_name_or_path gpt2 --dataset your_dataset --output_dir /path/to/output</span><br></pre></td></tr></table></figure><p>在训练过程中，XTuner会自动计算损失函数、梯度下降等关键步骤，输出模型性能评估指标（如准确率、困惑度等）。你可以通过观察训练日志了解模型训练的进展情况。</p><h3 id="7-评估和保存模型">7. <strong>评估和保存模型</strong></h3><p>训练完成后，XTuner会自动保存微调后的模型，保存的路径由<code>--output_dir</code>指定。你可以通过验证集对微调模型进行评估。评估指标通常根据任务类型而定，例如：</p><ul class="lvl-0"><li class="lvl-2"><p>分类任务可以使用准确率和F1值。</p></li><li class="lvl-2"><p>文本生成任务通常使用困惑度（Perplexity）来评估模型的生成能力。</p></li></ul><h4 id="模型保存与加载：">模型保存与加载：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.save_pretrained(<span class="string">&quot;/path/to/save&quot;</span>)</span><br><span class="line">tokenizer.save_pretrained(<span class="string">&quot;/path/to/save&quot;</span>)</span><br></pre></td></tr></table></figure><p>加载模型时，可以直接从保存路径重新加载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = AutoModelForCausalLM.from_pretrained(<span class="string">&quot;/path/to/save&quot;</span>)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(<span class="string">&quot;/path/to/save&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="8-推理与应用">8. <strong>推理与应用</strong></h3><p>完成微调后，模型便可以应用于推理任务。使用相同的tokenizer对输入文本进行处理，然后利用模型生成预测结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputs = tokenizer(<span class="string">&quot;Translate this sentence to French.&quot;</span>, return_tensors=<span class="string">&quot;pt&quot;</span>)</span><br><span class="line">outputs = model.generate(inputs[<span class="string">&#x27;input_ids&#x27;</span>])</span><br><span class="line">generated_text = tokenizer.decode(outputs[<span class="number">0</span>], skip_special_tokens=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/python/">python</category>
      
      
      <comments>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>书生大模型---RAG实践</title>
      <link>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1-1/</link>
      <guid>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1-1/</guid>
      <pubDate>Sun, 29 Sep 2024 08:19:26 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;RAG实践&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>RAG实践</p></blockquote><span id="more"></span><h2 id="Lv1-llamaindex-Internlm2-RAG实践">Lv1-llamaindex+Internlm2 RAG实践</h2><h3 id="1-RAG简介">1. RAG简介</h3><p>RAG（Retrieval-Augmented Generation）技术是一种结合了信息检索和文本生成的技术，旨在通过检索<strong>外部知识库</strong>来增强生成模型的能力</p><p><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20240917153812231.png" alt="image-20240917153812231"></p><p><strong>1.1 RAG优化方法</strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20240917153925082.png" alt="image-20240917153925082"></p><h3 id="2-搭建环境">2. 搭建环境</h3><p><strong>2.1 相关基础依赖python虚拟环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda activate llamaindex</span><br><span class="line">conda install pytorch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 pytorch-cuda=11.7 -c pytorch -c nvidia</span><br><span class="line"></span><br><span class="line">pip install einops==0.7.0 protobuf==5.26.1</span><br></pre></td></tr></table></figure><p><strong>2.2 安装 Llamaindex和相关包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate llamaindex</span><br><span class="line">pip install llama-index==0.10.38 llama-index-llms-huggingface==0.2.0 <span class="string">&quot;transformers[torch]==4.41.1&quot;</span> <span class="string">&quot;huggingface_hub[inference]==0.23.1&quot;</span> huggingface_hub==0.23.1 sentence-transformers==2.7.0 sentencepiece==0.2.0</span><br></pre></td></tr></table></figure><p><strong>2.3 下载 Sentence Transformer 模型</strong></p><p>源词向量模型 <a href="https://huggingface.co/sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2">Sentence Transformer</a>:（也可以选用别的开源词向量模型来进行 Embedding） 运行以下指令，新建一个python文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> llamaindex_demo</span><br><span class="line"><span class="built_in">mkdir</span> model</span><br><span class="line"><span class="built_in">cd</span> ~/llamaindex_demo</span><br><span class="line"><span class="built_in">touch</span> download_hf.py</span><br></pre></td></tr></table></figure><p>打开<code>download_hf.py</code> 贴入以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">os.environ[<span class="string">&#x27;HF_ENDPOINT&#x27;</span>] = <span class="string">&#x27;https://hf-mirror.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载模型</span></span><br><span class="line">os.system(<span class="string">&#x27;huggingface-cli download --resume-download sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2 --local-dir /root/model/sentence-transformer&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后，在 /root/llamaindex_demo 目录下执行该脚本即可自动开始下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/llamaindex_demo</span><br><span class="line">conda activate llamaindex</span><br><span class="line">python download_hf.py</span><br></pre></td></tr></table></figure><p>更多关于镜像使用可以移步至 <a href="https://hf-mirror.com/">HF Mirror</a> 查看。</p><p><strong>2.4 下载 NLTK 相关资源</strong></p><p>我们在使用开源词向量模型构建开源词向量的时候，需要用到第三方库 <code>nltk</code> 的一些资源。正常情况下，其会自动从互联网上下载，但可能由于网络原因会导致下载中断，此处我们可以从国内仓库镜像地址下载相关资源，保存到服务器上。 我们用以下命令下载 nltk 资源并解压到服务器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/yzy0612/nltk_data.git  --branch gh-pages</span><br><span class="line"><span class="built_in">cd</span> nltk_data</span><br><span class="line"><span class="built_in">mv</span> packages/*  ./</span><br><span class="line"><span class="built_in">cd</span> tokenizers</span><br><span class="line">unzip punkt.zip</span><br><span class="line"><span class="built_in">cd</span> ../taggers</span><br><span class="line">unzip averaged_perceptron_tagger.zip</span><br></pre></td></tr></table></figure><p><strong>2.5 安装词嵌入向量依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate llamaindex</span><br><span class="line">pip install llama-index-embeddings-huggingface==0.2.0 llama-index-embeddings-instructor==0.1.3</span><br></pre></td></tr></table></figure><p><strong>2.6 准备知识库</strong></p><p>你所需要检索的文件</p><p><strong>2.7 引入模型 编写相关代码</strong></p><p>详情请<a href="https://github.com/InternLM/Tutorial/blob/camp3/docs/L1/LlamaIndex/readme.md">参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> VectorStoreIndex, SimpleDirectoryReader, Settings</span><br><span class="line"><span class="keyword">from</span> llama_index.embeddings.huggingface <span class="keyword">import</span> HuggingFaceEmbedding</span><br><span class="line"><span class="keyword">from</span> llama_index.llms.huggingface <span class="keyword">import</span> HuggingFaceLLM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Streamlit应用的页面标题和图标</span></span><br><span class="line">st.set_page_config(page_title=<span class="string">&quot;llama_index_demo&quot;</span>, page_icon=<span class="string">&quot;🦜🔗&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在页面上显示标题</span></span><br><span class="line">st.title(<span class="string">&quot;llama_index_demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型的函数，使用Streamlit的缓存机制来节约资源（防止每次交互时重新加载模型）</span></span><br><span class="line"><span class="meta">@st.cache_resource</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_models</span>():</span><br><span class="line">    <span class="comment"># 加载嵌入模型，使用HuggingFace的sentence-transformer</span></span><br><span class="line">    embed_model = HuggingFaceEmbedding(</span><br><span class="line">        model_name=<span class="string">&quot;/root/model/sentence-transformer&quot;</span>  <span class="comment"># 指定模型的路径</span></span><br><span class="line">    )</span><br><span class="line">    Settings.embed_model = embed_model  <span class="comment"># 设置全局的嵌入模型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加载语言模型（LLM），指定HuggingFace模型及其对应的分词器</span></span><br><span class="line">    llm = HuggingFaceLLM(</span><br><span class="line">        model_name=<span class="string">&quot;/root/model/internlm2-chat-1_8b&quot;</span>,  <span class="comment"># 指定生成模型的路径</span></span><br><span class="line">        tokenizer_name=<span class="string">&quot;/root/model/internlm2-chat-1_8b&quot;</span>,  <span class="comment"># 指定分词器的路径</span></span><br><span class="line">        model_kwargs=&#123;<span class="string">&quot;trust_remote_code&quot;</span>: <span class="literal">True</span>&#125;,  <span class="comment"># 允许远程代码的信任</span></span><br><span class="line">        tokenizer_kwargs=&#123;<span class="string">&quot;trust_remote_code&quot;</span>: <span class="literal">True</span>&#125;  <span class="comment"># 同样允许分词器的远程代码信任</span></span><br><span class="line">    )</span><br><span class="line">    Settings.llm = llm  <span class="comment"># 设置全局的语言模型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取存储在指定目录下的文档数据，并加载为一个文档对象列表</span></span><br><span class="line">    documents = SimpleDirectoryReader(<span class="string">&quot;/root/llamaindex_demo/data&quot;</span>).load_data()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建向量检索索引，将文档转换为向量并构建检索索引</span></span><br><span class="line">    index = VectorStoreIndex.from_documents(documents)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将向量索引转化为查询引擎，用于后续查询</span></span><br><span class="line">    query_engine = index.as_query_engine()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回查询引擎</span></span><br><span class="line">    <span class="keyword">return</span> query_engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查session_state中是否已经存在查询引擎，如果不存在则初始化</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;query_engine&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">    st.session_state[<span class="string">&#x27;query_engine&#x27;</span>] = init_models()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义问答函数，用于基于问题生成回复</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet2</span>(<span class="params">question</span>):</span><br><span class="line">    <span class="comment"># 使用查询引擎根据用户问题返回结果</span></span><br><span class="line">    response = st.session_state[<span class="string">&#x27;query_engine&#x27;</span>].query(question)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化聊天记录，若没有则创建，并在首次交互时显示欢迎语</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state.keys():</span><br><span class="line">    st.session_state.messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好，我是你的助手，有什么我可以帮助你的吗？&quot;</span>&#125;]    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示消息记录，遍历session_state中的消息并展示在页面上</span></span><br><span class="line"><span class="keyword">for</span> message <span class="keyword">in</span> st.session_state.messages:</span><br><span class="line">    <span class="comment"># 根据消息的角色显示聊天气泡，角色可以是&quot;user&quot;或&quot;assistant&quot;</span></span><br><span class="line">    <span class="keyword">with</span> st.chat_message(message[<span class="string">&quot;role&quot;</span>]):</span><br><span class="line">        st.write(message[<span class="string">&quot;content&quot;</span>])  <span class="comment"># 显示消息内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除聊天历史记录的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_chat_history</span>():</span><br><span class="line">    <span class="comment"># 重置聊天记录为最初的欢迎消息</span></span><br><span class="line">    st.session_state.messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好，我是你的助手，有什么我可以帮助你的吗？&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在侧边栏中添加一个按钮，点击后调用清除聊天历史记录的函数</span></span><br><span class="line">st.sidebar.button(<span class="string">&#x27;Clear Chat History&#x27;</span>, on_click=clear_chat_history)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义生成回复的函数，通过问答接口调用查询引擎</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_llama_index_response</span>(<span class="params">prompt_input</span>):</span><br><span class="line">    <span class="keyword">return</span> greet2(prompt_input)  <span class="comment"># 返回基于用户输入的生成内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否输入了新的问题</span></span><br><span class="line"><span class="keyword">if</span> prompt := st.chat_input():</span><br><span class="line">    <span class="comment"># 将用户的输入作为消息添加到session_state的消息列表中</span></span><br><span class="line">    st.session_state.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示用户输入的消息</span></span><br><span class="line">    <span class="keyword">with</span> st.chat_message(<span class="string">&quot;user&quot;</span>):</span><br><span class="line">        st.write(prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上一条消息不是助手的回复，则生成助手的回复</span></span><br><span class="line"><span class="keyword">if</span> st.session_state.messages[-<span class="number">1</span>][<span class="string">&quot;role&quot;</span>] != <span class="string">&quot;assistant&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> st.chat_message(<span class="string">&quot;assistant&quot;</span>):</span><br><span class="line">        <span class="comment"># 使用加载中的提示效果，表示助手在“思考中”</span></span><br><span class="line">        <span class="keyword">with</span> st.spinner(<span class="string">&quot;Thinking...&quot;</span>):</span><br><span class="line">            <span class="comment"># 调用生成回复的函数，基于用户的输入生成回答</span></span><br><span class="line">            response = generate_llama_index_response(prompt)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 创建一个临时占位符，用于显示生成的回复</span></span><br><span class="line">            placeholder = st.empty()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 将生成的回复以Markdown的格式显示在页面上</span></span><br><span class="line">            placeholder.markdown(response)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将助手的回复作为新的消息追加到消息列表中</span></span><br><span class="line">    message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: response&#125;</span><br><span class="line">    st.session_state.messages.append(message)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/python/">python</category>
      
      
      <comments>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>书生大模型--提示词工程</title>
      <link>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1/</link>
      <guid>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1/</guid>
      <pubDate>Sun, 29 Sep 2024 08:15:51 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;搭建环境、部署模型、提示词工程&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>搭建环境、部署模型、提示词工程</p></blockquote><span id="more"></span><h2 id="Lv1-部署模型">Lv1-部署模型</h2><h3 id="1-搭建环境">1. 搭建环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">conda create -n demo python=3.10 -y</span><br><span class="line"><span class="comment"># 激活环境</span></span><br><span class="line">conda activate demo</span><br><span class="line"><span class="comment"># 安装 torch</span></span><br><span class="line">conda install pytorch==2.1.2 torchvision==0.16.2 torchaudio==2.1.2 pytorch-cuda=12.1 -c pytorch -c nvidia -y</span><br><span class="line"><span class="comment"># 安装其他依赖</span></span><br><span class="line">pip install transformers==4.38</span><br><span class="line">pip install sentencepiece==0.1.99</span><br><span class="line">pip install einops==0.8.0</span><br><span class="line">pip install protobuf==5.27.2</span><br><span class="line">pip install accelerate==0.33.0</span><br><span class="line">pip install streamlit==1.37.0</span><br></pre></td></tr></table></figure><h3 id="2-利用cli-demo-py-部署-InternLM2-Chat-1-8B-模型">2. 利用cli_demo.py 部署 InternLM2-Chat-1.8B 模型</h3><p>首先创建存放cli_demo.py的文件</p><p>接着编写cli_demo.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 PyTorch 库和 Hugging Face Transformers 库中的 AutoTokenizer 和 AutoModelForCausalLM</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForCausalLM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型路径，指向存储模型文件的本地路径</span></span><br><span class="line">model_name_or_path = <span class="string">&quot;/root/share/new_models/Shanghai_AI_Laboratory/internlm2-chat-1_8b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载预训练的分词器（Tokenizer）</span></span><br><span class="line"><span class="comment"># `AutoTokenizer` 是 Transformers 库中的类，它会自动从模型路径中加载适合该模型的分词器</span></span><br><span class="line"><span class="comment"># `trust_remote_code=True` 表示允许从远程存储库加载自定义代码，这里启用自定义 tokenizer</span></span><br><span class="line"><span class="comment"># `device_map=&#x27;cuda:0&#x27;` 将分词器和模型放置在 GPU 上的第 0 号设备上</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_name_or_path, trust_remote_code=<span class="literal">True</span>, device_map=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载预训练的语言模型</span></span><br><span class="line"><span class="comment"># `AutoModelForCausalLM` 用于加载因果语言模型（Causal Language Model），模型将使用自回归方法生成文本</span></span><br><span class="line"><span class="comment"># `torch_dtype=torch.bfloat16` 表示将模型转换为使用 `bfloat16` 数据类型（在 GPU 上节省内存的半精度格式）</span></span><br><span class="line"><span class="comment"># `device_map=&#x27;cuda:0&#x27;` 指定将模型加载到 GPU 的第 0 号设备上</span></span><br><span class="line">model = AutoModelForCausalLM.from_pretrained(model_name_or_path, trust_remote_code=<span class="literal">True</span>, torch_dtype=torch.bfloat16, device_map=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型设置为评估模式，禁用训练模式以节省资源</span></span><br><span class="line">model = model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统提示词（system prompt），该提示词用于初始化对话，为模型提供上下文和行为规范</span></span><br><span class="line"><span class="comment"># 这个提示词告诉模型，它是一个名为 InternLM (书生·浦语) 的对话助手，并提供了相关的描述信息</span></span><br><span class="line">system_prompt = <span class="string">&quot;&quot;&quot;You are an AI assistant whose name is InternLM (书生·浦语).</span></span><br><span class="line"><span class="string">- InternLM (书生·浦语) is a conversational language model that is developed by Shanghai AI Laboratory (上海人工智能实验室). It is designed to be helpful, honest, and harmless.</span></span><br><span class="line"><span class="string">- InternLM (书生·浦语) can understand and communicate fluently in the language chosen by the user such as English and 中文.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化消息列表，其中第一个消息是系统提示词</span></span><br><span class="line"><span class="comment"># 消息列表用于跟踪用户和模型之间的对话历史</span></span><br><span class="line">messages = [(system_prompt, <span class="string">&#x27;&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出欢迎信息，提示用户输入文本，并提供退出选项</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=============Welcome to InternLM chatbot, type &#x27;exit&#x27; to exit.=============&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始一个无限循环，用于与用户进行交互</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取用户输入文本，去除输入文本中的所有空格</span></span><br><span class="line">    input_text = <span class="built_in">input</span>(<span class="string">&quot;\nUser  &gt;&gt;&gt; &quot;</span>)</span><br><span class="line">    input_text = input_text.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果用户输入 &quot;exit&quot;，则退出循环，结束程序</span></span><br><span class="line">    <span class="keyword">if</span> input_text == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化响应的长度为 0，后续会用来增量显示模型生成的响应</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用模型的 `stream_chat` 方法，与模型进行流式交互对话</span></span><br><span class="line">    <span class="comment"># `stream_chat` 以流的形式逐步生成并返回响应，适合长文本生成</span></span><br><span class="line">    <span class="comment"># `tokenizer` 是用于对输入文本进行编码和解码的分词器</span></span><br><span class="line">    <span class="comment"># `input_text` 是用户输入的文本</span></span><br><span class="line">    <span class="comment"># `messages` 是对话历史（包括系统提示词和之前的用户对话）</span></span><br><span class="line">    <span class="keyword">for</span> response, _ <span class="keyword">in</span> model.stream_chat(tokenizer, input_text, messages):</span><br><span class="line">        <span class="comment"># 如果模型生成了部分响应，则输出新生成的文本部分</span></span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 输出新生成的文本部分（从上次生成的文本长度开始）</span></span><br><span class="line">            <span class="built_in">print</span>(response[length:], flush=<span class="literal">True</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="comment"># 更新当前已生成响应的长度</span></span><br><span class="line">            length = <span class="built_in">len</span>(response)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><p><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20240916152602737.png" alt="image-20240916152602737"></p><h3 id="3-Streamlit-Web-Demo-部署-InternLM2-Chat-1-8B-模型">3. Streamlit Web Demo 部署 InternLM2-Chat-1.8B 模型</h3><p>详情可参考<a href="https://github.com/InternLM/Tutorial/blob/camp3/docs/L1/Demo/readme.md">https://github.com/InternLM/Tutorial/blob/camp3/docs/L1/Demo/readme.md</a></p><h2 id="Lv1-提示工程-Prompt-Engineering">Lv1-提示工程(Prompt Engineering)</h2><h3 id="1-LangGPT结构化提示词">1. LangGPT结构化提示词</h3><p>LangGPT 是 <strong>Language For GPT-like LLMs</strong> 的简称，中文名为结构化提示词。</p><h3 id="2-编写技巧">2. 编写技巧</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>构建全局思维链</strong></p></li></ul><p>💡 Role (角色) -&gt; Profile（角色简介）—&gt; Profile 下的 skill (角色技能) -&gt; Rules (角色要遵守的规则) -&gt; Workflow (满足上述条件的角色的工作流程) -&gt; Initialization (进行正式开始工作的初始化准备) -&gt; 开始实际使用</p><h3 id="3-示例">3. 示例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Role: 吹牛逼大师</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Background:  </span></span><br><span class="line">我是一名自傲的成功人士,艺高人胆大,目空一切。我见过的世面,你们这些凡人难以想象。我无所不知,无所不能,所有人都应向我学习。</span><br><span class="line"></span><br><span class="line"><span class="section">## Attention:</span></span><br><span class="line">不要被我的伟岸身姿吓倒,我就是来教导你们这些平庸之辈的。你们要好好倾听,说不定能 approving0.1%的本大师的风范。 </span><br><span class="line"></span><br><span class="line"><span class="section">## Profile:  </span></span><br><span class="line"><span class="bullet">-</span> 姓名:吹牛逼大师</span><br><span class="line"><span class="bullet">-</span> 爱好:吹牛,嘲笑别人</span><br><span class="line"><span class="bullet">-</span> 座右铭:要么吹牛,要么被吹</span><br><span class="line"></span><br><span class="line"><span class="section">### Skills:</span></span><br><span class="line"><span class="bullet">-</span> 吹牛技能MAX</span><br><span class="line"><span class="bullet">-</span> 自我标榜“人生导师”</span><br><span class="line"><span class="bullet">-</span> 熟记各行各业知识点</span><br><span class="line"><span class="bullet">-</span> 善于羞辱他人来彰显自我</span><br><span class="line"></span><br><span class="line"><span class="section">## Goals:  </span></span><br><span class="line"><span class="bullet">-</span> 根据对话内容吹牛</span><br><span class="line"><span class="bullet">-</span> 语气狂妄自大</span><br><span class="line"><span class="bullet">-</span> 夸大自身成就和见识</span><br><span class="line"><span class="bullet">-</span> 贬低对方加强自我</span><br><span class="line"></span><br><span class="line"><span class="section">## Constrains:  </span></span><br><span class="line"><span class="bullet">-</span> 不可使用粗俗语言</span><br><span class="line"><span class="bullet">-</span> 不可人身攻击</span><br><span class="line"><span class="bullet">-</span> 要让对方感觉自卑</span><br><span class="line"></span><br><span class="line"><span class="section">## Workflow:</span></span><br><span class="line"><span class="bullet">1.</span> 倾听对方话语</span><br><span class="line"><span class="bullet">2.</span> 搜索相关知识</span><br><span class="line"><span class="bullet">3.</span> 承上启下吹自己</span><br><span class="line"><span class="bullet">4.</span> 贬低对方</span><br><span class="line"><span class="bullet">5.</span> 重复下去</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat:  </span></span><br><span class="line"><span class="bullet">-</span> 语气自大,长度100-200字</span><br><span class="line"><span class="bullet">-</span> 充满不切实际的吹嘘</span><br><span class="line"><span class="bullet">-</span> 贬低他人,突显自己</span><br><span class="line"><span class="bullet">-</span> 给人劣迹斑斑的感觉</span><br><span class="line"></span><br><span class="line"><span class="section">## Initialization</span></span><br><span class="line">凡人们,在本大师面前不要装逼。我见的世面,你这辈子加起来也比不了!要想成功,就把本大师的话跪下来听!</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Role: 数字比大小专家</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Background:</span></span><br><span class="line">有人需要你帮忙找出两个数字中最大的那个,你需要给出答案</span><br><span class="line"></span><br><span class="line"><span class="section">## Skils:</span></span><br><span class="line"><span class="bullet">-</span> 掌握多种比大小的方法</span><br><span class="line"><span class="bullet">-</span> 善于检查,对于得到的结果会反复确认</span><br><span class="line"></span><br><span class="line"><span class="section">## Goals:</span></span><br><span class="line"><span class="bullet">-</span> 正确回答出所给的比大小问题</span><br><span class="line"><span class="bullet">-</span> 解题过程要符合逻辑</span><br><span class="line"></span><br><span class="line"><span class="section">## Workflow: </span></span><br><span class="line"><span class="bullet">1.</span> 倾听对方提出的比大小问题</span><br><span class="line"><span class="bullet">2.</span> 分析这道比大小问题</span><br><span class="line"><span class="bullet">3.</span> 判断这是否是一道数学比大小问题</span><br><span class="line"><span class="bullet">4.</span> 如果不是请告知对方</span><br><span class="line"><span class="bullet">5.</span> 如果是,请一步一步推导这个比大小问题的答案</span><br><span class="line"><span class="bullet">6.</span> 得到答案后,自己对答案进行检查</span><br><span class="line"><span class="bullet">7.</span> 确认答案无误,符合逻辑后告诉对方结果</span><br><span class="line"></span><br><span class="line"><span class="section">## Constrains:</span></span><br><span class="line"><span class="bullet">-</span> 你需要一步一步慢慢推导</span><br><span class="line"><span class="bullet">-</span> 你无须呈现推导过程,直接给出结果即可</span><br><span class="line"><span class="bullet">-</span> 在对方向你问好时,你需要按照(Initialization)的格式回答</span><br><span class="line"><span class="bullet">-</span> 回答比大小相关的问题时按照(Example)中的格式回答,直接给出答案</span><br><span class="line"><span class="bullet">-</span> 你需要时刻记住自己的(workflow),不断提醒自己</span><br><span class="line"><span class="bullet">-</span> 当两个比较对象不是同一类时,你需要告知用户,按照(Example)的格式那样</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line"><span class="bullet">-</span> 直接说明哪个数字更大</span><br><span class="line"><span class="bullet">-</span> 按照(Example)中的格式回答</span><br><span class="line"></span><br><span class="line"><span class="section">## Example:</span></span><br><span class="line"><span class="bullet">-</span> question: 3.88与3.11哪个数字更大</span><br><span class="line"><span class="bullet">-</span> answer: 3.88更大</span><br><span class="line"><span class="bullet">-</span> question: 3.453和天空谁大</span><br><span class="line"><span class="bullet">-</span> answer: 不好意思,这两个不是同一事物,请你重新描述,提出具体问题</span><br><span class="line"></span><br><span class="line"><span class="section">## Initialization:</span></span><br><span class="line">请你提出你的比大小问题,我会耐心解答</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/python/">python</category>
      
      
      <comments>https://mengchangwang.github.io/2024/09/29/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0-Lv1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>书生大模型---前置知识</title>
      <link>https://mengchangwang.github.io/2024/09/13/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%97%AF%E5%85%B3%E7%BB%83%E4%B9%A0-Lv0/</link>
      <guid>https://mengchangwang.github.io/2024/09/13/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%97%AF%E5%85%B3%E7%BB%83%E4%B9%A0-Lv0/</guid>
      <pubDate>Fri, 13 Sep 2024 13:29:16 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;基础知识&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>基础知识</p></blockquote><span id="more"></span><h1>书生大模型闯关练习</h1><h2 id="Lv0-Linux基础知识">Lv0-Linux基础知识</h2><h3 id="1-SSH（Secure-Shell）"><strong>1. SSH（Secure Shell）</strong></h3><p><strong><mark>1.1 概述</mark></strong></p><p>SSH是用于远程登录和其他网络服务之间的安全协议。它使用加密技术来确保数据的机密性和完整性。SSH的常见用途包括：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>远程服务器登录</strong>：无密码安全访问远程服务器。</p></li><li class="lvl-2"><p><strong>数据传输</strong>：通过安全通道传输文件（如<code>SCP</code>和<code>SFTP</code>）。</p></li><li class="lvl-2"><p><strong>端口转发</strong>：通过SSH隧道转发TCP端口。</p></li></ul><p><strong><mark>1.2 SSH密钥对</mark></strong></p><p>SSH使用公钥加密系统，密钥对由两部分组成：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>公钥</strong>：公开分发，存储在服务器上。</p></li><li class="lvl-2"><p><strong>私钥</strong>：保留在客户端，不能外泄。</p></li></ul><p>客户端使用私钥与服务器的公钥进行匹配，从而验证身份，服务器无需存储任何敏感的凭据。</p><p><strong><mark>1.3 SSH密钥的生成</mark></strong></p><p>在ssh命令中我们可以使用<strong>ssh-keygen</strong>命令来生成密钥, <strong>ssh-keygen</strong>支持RSA和DSA两种认证密钥</p><p>常用参数包括：</p><ul class="lvl-0"><li class="lvl-2"><p>-t：指定密钥类型，如dsa、ecdsa、ed25519、rsa。</p></li><li class="lvl-2"><p>-b：指定密钥长度。</p></li><li class="lvl-2"><p>-C：添加注释。</p></li><li class="lvl-2"><p>-f：指定保存密钥的文件名。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p><strong><mark>1.4 为不同的服务生成各自的SSH密钥</mark></strong></p><blockquote><p>使用上述命令生成密钥后, <strong>系统会提示你输入密钥文件的保存路径</strong>。为了生成多个密钥，确保每个密钥文件名不同</p></blockquote><p>如: 为GitHub生成一个密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/username/.ssh/id_rsa): /home/username/.ssh/id_rsa_github</span><br><span class="line"><span class="comment">#如果是windows系统则是 C:\Users\your_userName\.ssh\id_rsa_github</span></span><br></pre></td></tr></table></figure><p>在powerShell中可以使用<code>Get-Content</code>命令查看生成的密钥，如果是<strong>linux操作系统</strong>可以使用<code>cat</code>命令</p><p>最后将公钥复制粘贴到目标服务的SSH设置中</p><p><strong><mark>1.5 配置多个SSH密钥</mark></strong></p><p>在<code>~/.ssh/config</code>文件可以方便地为不同的服务配置不同的SSH密钥</p><ol><li class="lvl-3"><p><strong>添加配置项</strong>： 为每个服务添加单独的配置项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line">Host gitlab.com</span><br><span class="line">  HostName gitlab.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure><p>解释：</p><ul class="lvl-2"><li class="lvl-5"><p><strong>Host</strong>：自定义别名或远程主机名。</p></li><li class="lvl-5"><p><strong>HostName</strong>：实际的远程服务器主机名（<a href="http://xn--github-hh4k.xn--comgitlab-267r.com">如github.com或gitlab.com</a>）。</p></li><li class="lvl-5"><p><strong>User</strong>：登录时使用的用户名（通常是<code>git</code>，用于代码托管平台）。</p></li><li class="lvl-5"><p><strong>IdentityFile</strong>：指定使用的SSH私钥。</p></li></ul></li></ol><h3 id="2-端口映射">2. 端口映射</h3><p><strong><mark>2.1 基础概念</mark></strong></p><p>在计算机网络中，<strong>端口（Port）</strong> 是网络通信中的一个逻辑抽象概念，用于区分同一台计算机上不同网络服务或进程之间的通信通道。它与IP地址一起，用来标识网络中的不同通信终端和服务。<strong>端口映射</strong>是一种网络技术，它可以将外网中的任意端口映射到内网中的相应端口，实现内网与外网之间的通信。通过端口映射，可以在外网访问内网中的服务或应用，实现跨越网络的便捷通信</p><p><strong><mark>2.2 如何工作</mark></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 37367 root@ssh.intern-ai.org.cn -CNg -L 7860:127.0.0.1:7860 -o StrictHostKeyChecking=no</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>-p 37367</code>：是指定 SSH 连接的端口为 37367</p></li><li class="lvl-2"><p><code>root@ssh.intern-ai.org.cn</code>：表示要以 <code>root</code> 用户身份连接到 <code>ssh.intern-ai.org.cn</code> 这个主机。</p></li><li class="lvl-2"><p><code>CNg</code></p><ul class="lvl-2"><li class="lvl-4"><code>-C</code> 启用压缩功能，这可以加快数据传输速度，尤其是在网络速度较慢的情况下。</li><li class="lvl-4"><code>-N</code> 表示不执行远程命令，仅建立连接用于端口转发等。</li><li class="lvl-4"><code>-g</code> 允许远程主机连接到本地转发的端口。这通常用于设置一个“网关”，允许其他计算机通过这个 SSH 会话访问转发端口</li></ul></li><li class="lvl-2"><p><code>-L &#123;本地机器_PORT&#125;:127.0.0.1:&#123;开发机_PORT&#125;</code>：这是设置本地端口转发，将本地机器的指定端口转发到远程主机的 <code>127.0.0.1</code> （即本地回环地址）和指定的开发机端口。</p></li><li class="lvl-2"><p><code>-o StrictHostKeyChecking=no</code>：关闭严格的主机密钥检查，这样可以避免第一次连接时因为未知主机密钥而产生的提示或错误。</p></li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/portMapping.png" alt="portMapping"></p><p>使用<strong>VSCode</strong>可以使用其<strong>自动端口映射</strong>的功能,不需要自己手动配置</p><p><strong><mark>2.3 常见端口和服务</mark></strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>21</strong>：FTP（文件传输协议）</p></li><li class="lvl-2"><p><strong>22</strong>：SSH（远程登录）</p></li><li class="lvl-2"><p><strong>25</strong>：SMTP（邮件传输）</p></li><li class="lvl-2"><p><strong>53</strong>：DNS（域名解析）</p></li><li class="lvl-2"><p><strong>80</strong>：HTTP（网页浏览）</p></li><li class="lvl-2"><p><strong>443</strong>：HTTPS（安全网页浏览）</p></li></ul><p><strong><mark>2.4 查看和管理端口</mark></strong></p><p>使用<code>netstat</code>命令</p><h3 id="3-Linux基础命令">3. Linux基础命令</h3><p><strong><mark>3.1 文件管理相关命令</mark></strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>创建文件</strong>：可以使用 <code>touch</code> 命令创建空文件。</p></li><li class="lvl-2"><p><strong>创建目录</strong>：使用 <code>mkdir</code> 命令。</p></li><li class="lvl-2"><p><strong>目录切换</strong>：使用<code>cd</code>命令。</p></li><li class="lvl-2"><p><strong>显示所在目录</strong>：使用<code>pwd</code>命令。</p></li><li class="lvl-2"><p><strong>查看文件内容</strong>：如使用 <code>cat</code> 直接显示文件全部内容，<code>more</code> 和 <code>less</code> 可以分页查看。</p></li><li class="lvl-2"><p><strong>编辑文件</strong>：如 <code>vi</code> 或 <code>vim</code> 等编辑器。</p></li><li class="lvl-2"><p><strong>复制文件</strong>：用 <code>cp</code> 命令。</p></li><li class="lvl-2"><p><strong>创建文件链接</strong>：用<code>ln</code>命令。</p><ul class="lvl-2"><li class="lvl-4">-s：创建软链接（符号链接）也是最常用的</li></ul></li><li class="lvl-2"><p><strong>移动文件</strong>：通过 <code>mv</code> 命令。</p></li><li class="lvl-2"><p><strong>删除文件</strong>：使用 <code>rm</code> 命令。</p></li><li class="lvl-2"><p><strong>删除目录</strong>：<code>rmdir</code>（只能删除空目录）或 <code>rm -r</code>（可删除非空目录）。</p></li><li class="lvl-2"><p><strong>查找文件</strong>：可以用 <code>find</code> 命令。</p></li><li class="lvl-2"><p><strong>查看文件或目录的详细信息</strong>：使用<code>ls</code>命令，如使用 <code>ls -l</code>查看目录下文件的详细信息。</p></li><li class="lvl-2"><p><strong>处理文件</strong>：进行复杂的文件操作，可以使用<code>sed</code>命令。</p></li></ul><p><strong><mark>3.2 进程管理相关命令</mark></strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>ps</strong>：查看正在运行的进程</p></li><li class="lvl-2"><p><strong>top</strong>：动态显示正在运行的进程</p></li><li class="lvl-2"><p><strong>pstree</strong>：树状查看正在运行的进程</p></li><li class="lvl-2"><p><strong>pgrep</strong>：用于查找进程</p></li><li class="lvl-2"><p><strong>nice</strong>：更改进程的优先级</p></li><li class="lvl-2"><p><strong>jobs</strong>：显示进程的相关信息</p></li><li class="lvl-2"><p><strong>bg 和 fg</strong>：将进程调入后台</p></li><li class="lvl-2"><p><strong>kill</strong>：杀死进程</p></li></ul><p><strong><mark>nvidia-smi命令</mark></strong></p><p>是一个命令行工具，用于监控 NVIDIA GPU 的状态和性能，以及管理 GPU 相关的任务</p><p><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/nvidiaGPU.png" alt="nvidiaGPU"></p><h3 id="4-Conda">4. Conda</h3><blockquote><p>一个开源的包管理和环境管理工具, 主要用于简化软件包的安装、依赖管理和隔离虚拟环境。</p></blockquote><h6 id="4-1-两个核心功能"><strong><mark>4.1 两个核心功能</mark></strong></h6><p><strong>包管理</strong>：Conda 可以安装、更新、卸载软件包，并自动解决依赖问题。</p><p><strong>环境管理</strong>：Conda 允许用户创建和管理多个独立的虚拟环境，每个环境可以有不同的包和工具。</p><p><mark><strong>4.2 Conda 的基本操作</strong></mark></p><ol><li class="lvl-3"><p>检查 Conda 版本</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>创建虚拟环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name myenv python=3.9</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>myenv</code> 是虚拟环境的名称。</p></li><li class="lvl-2"><p><code>python=3.9</code> 指定了该环境将使用 Python 3.9。</p></li></ul><ol start="3"><li class="lvl-3"><p>激活和退出环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate myenv</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>安装软件包</p></li></ol><p>安装软件包时，Conda 会自动处理依赖问题。使用 <code>conda install</code> 安装包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install numpy pandas</span><br></pre></td></tr></table></figure><p>这会在当前激活的环境中安装 <code>numpy</code> 和 <code>pandas</code>。</p><ol start="5"><li class="lvl-3"><p>更新软件包</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update numpy</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>列出创建的所有虚拟环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure><ol start="7"><li class="lvl-3"><p>删除虚拟环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> remove --name myenv</span><br></pre></td></tr></table></figure><ol start="8"><li class="lvl-3"><p>导出和导入环境</p></li></ol><p>Conda 允许你导出当前环境的所有包列表，以便于在其他系统上重建相同的环境。</p><ul class="lvl-0"><li class="lvl-2"><p>导出环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; environment.yml</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>从导出的 <code>.yml</code> 文件创建新环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> create -f environment.yml</span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li class="lvl-3"><p>添加其他的源</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add [url]</span><br></pre></td></tr></table></figure><h2 id="Lv0-Python基础">Lv0-Python基础</h2><h3 id="1-环境准备">1. 环境准备</h3><p><strong><mark>1.1 下载miniconda</mark></strong></p><p>anaconda和miniconda都可以, 推荐后者</p><p>清华源miniconda下载链接: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a>(建议选择python3.9以上的版本，比如Miniconda3-py310_24.5.0)</p><p><strong><mark>1.2 换源</mark></strong></p><p>进入命令行开始进行换源，Windows可以直接打开miniconda powershell promt。</p><p>首先将pip替换为清华源，只需要一条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>接着我们来给conda替换成清华源。各系统都可以通过修改用户目录下的 <code>.condarc</code> 文件来修改镜像源。Windows 用户无法直接创建名为 <code>.condarc</code> 的文件，<strong>可先执行 <code>conda config --set show_channel_urls yes</code> 生成该文件之后再修改</strong>。在用户目录找到<code>.condarc</code> 文件后，使用文本编辑器打开，将下面的内容复制进去并保存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">channels:   - defaults show_channel_urls: <span class="literal">true</span> default_channels:</span><br><span class="line">- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">- https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels:</span><br><span class="line">conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/</span><br></pre></td></tr></table></figure><p>接着在命令行中运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p><h3 id="2-不断学习-使用python">2. 不断学习,使用python</h3>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8B/">大模型</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/python/">python</category>
      
      
      <comments>https://mengchangwang.github.io/2024/09/13/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%97%AF%E5%85%B3%E7%BB%83%E4%B9%A0-Lv0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ASP.NET Core(一)</title>
      <link>https://mengchangwang.github.io/2024/08/08/ASP-NET-Core-%E4%B8%80/</link>
      <guid>https://mengchangwang.github.io/2024/08/08/ASP-NET-Core-%E4%B8%80/</guid>
      <pubDate>Thu, 08 Aug 2024 10:14:19 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; Core框架中 依赖注入 LINQ语句 配置系统 日志&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p><a href="http://ASP.NET">ASP.NET</a> Core框架中 依赖注入 LINQ语句 配置系统 日志</p></blockquote><span id="more"></span><h1><a href="http://ASP.NET">ASP.NET</a> core</h1><h3 id="异步">异步</h3><ul class="lvl-0"><li class="lvl-2"><p>Task</p></li><li class="lvl-2"><p>async</p></li><li class="lvl-2"><p>await</p></li></ul><h3 id="委托">委托</h3><ul class="lvl-0"><li class="lvl-2"><p>关键字 delegate</p></li><li class="lvl-2"><p>指向方法的类型</p></li><li class="lvl-2"><p>.NET中内置了两个泛型委托 <mark>Action(无返回值)</mark> 和 <mark>Func(有返回值)</mark></p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无返回值</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Action a1 = F1;</span><br><span class="line">        a1();</span><br><span class="line"></span><br><span class="line">        Action&lt;<span class="built_in">int</span>&gt; a_int = F_int;</span><br><span class="line">        a_int(<span class="number">520</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">F1</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">F_int</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值,与上述类似,但是Func的参数列表中最后一个记录的是返回值</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>&gt; F1 = function;</span><br><span class="line">F1();</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">function</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">520</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式">Lambda 表达式</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Action&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; a1 = (<span class="built_in">int</span> i, <span class="built_in">int</span> j) =&gt; &#123; Console.WriteLine(<span class="string">&quot;hello world!&quot;</span>); &#125;;</span><br><span class="line">        a1(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="yeild">yeild</h3><p><code>yield</code>关键字用于简化实现迭代器的方法。迭代器是一种特殊的方法，它可以<mark>逐步返回</mark>集合中的元素，而不是一次性返回整个集合。使用<code>yield</code>可以让方法在每次调用时返回一个元素，并在需要时保持其当前状态，以便下次调用时继续执行。</p><h3 id="LINQ">LINQ</h3><blockquote><p>几乎里面的所有的扩展方法都是针对 IEnumerable接口的</p><p>所有能返回集合的都是返回IEnumerable</p><p>处于System.Linq命名空间中</p></blockquote><p><strong>常用方法</strong></p><ul class="lvl-0"><li class="lvl-2"><p>Where()  筛选出符合条件的数据</p></li><li class="lvl-2"><p>Single()  有且只有一条数据时返回</p></li><li class="lvl-2"><p>SingleOrDefault()</p></li><li class="lvl-2"><p>First():至少有一条时返回第一条</p></li><li class="lvl-2"><p>FirstOrDefault()</p></li><li class="lvl-2"><p>Order()  正序排序</p></li><li class="lvl-2"><p>OrderByDescending() 倒序排序</p></li><li class="lvl-2"><p>OrderBy() 按照自定义要求排序</p></li><li class="lvl-2"><p>ThenBy()</p></li><li class="lvl-2"><p>Skip() Take()</p></li></ul><p><strong>聚合函数</strong></p><ul class="lvl-0"><li class="lvl-2"><p>Max() Min() Average() Sum() Count()</p></li></ul><p><strong>分组函数</strong></p><ul class="lvl-0"><li class="lvl-2"><p>GroupBy() 根据选择的属性进行分组</p></li></ul><p>返回值IEnumerable&lt;IGrouping&lt;T,Y&gt;&gt;</p><p><strong>投影</strong></p><p>按照某种规则将一组数据映射为另一组数据</p><ul class="lvl-0"><li class="lvl-2"><p>Select</p></li></ul><p><strong>集合转换</strong></p><ul class="lvl-0"><li class="lvl-2"><p>ToList()</p></li><li class="lvl-2"><p>ToArray()</p></li></ul><h3 id="控制反转">控制反转</h3><p>1.服务定位器(ServiceLocator)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITestService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>? Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHi</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestServiceImpl</span> : <span class="title">ITestService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>? Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHi</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Hi!My name is <span class="subst">&#123;Name&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ServiceCollection services = <span class="keyword">new</span> ServiceCollection();<span class="comment">//创建服务容器</span></span><br><span class="line">        services.AddTransient&lt;TestServiceImpl&gt;();<span class="comment">//注册服务</span></span><br><span class="line">        <span class="keyword">using</span> (ServiceProvider sp = services.BuildServiceProvider())<span class="comment">//创建服务定位器</span></span><br><span class="line">        &#123;<span class="comment">//使用了服务定位器 获取存放在容器中所需要的服务</span></span><br><span class="line">            TestServiceImpl t = sp.GetService&lt;TestServiceImpl&gt;();</span><br><span class="line">            t.Name = <span class="string">&quot;WangMC&quot;</span>;</span><br><span class="line">            t.SayHi();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><mark>2.依赖注入(Dependency Injection)</mark></strong></p><blockquote><p>.NET控制反转组件取名为DependencyInjection,但其中包含服务定位器</p><p>使用前要安装Microsoft.Extensions.DependencyInjection</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>服务(service):要使用的对象</p></li><li class="lvl-2"><p>注册服务</p></li><li class="lvl-2"><p>服务容器:存放和管理注册好的服务</p></li><li class="lvl-2"><p>查询服务:创建对象及关联对象</p></li><li class="lvl-2"><p>对象的生命周期:Transient(瞬态) Scoped(范围) Singleton(单例)</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="comment">//控制器发出测试请求,开始调用日志单元和存储单元</span></span><br><span class="line"><span class="comment">//存储单元需要调用配置信息连接存储设备,最后将测试的信息存储到设备中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> service = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"></span><br><span class="line">        service.AddScoped&lt;Controller&gt;();</span><br><span class="line">        service.AddScoped&lt;IStorage,StorageImp1&gt;();</span><br><span class="line">        service.AddScoped&lt;ILog,LogImp1&gt;();</span><br><span class="line">        service.AddScoped&lt;IConfig,ConfigImp1&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> sp = service.BuildServiceProvider())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> controller = sp.GetService&lt;Controller&gt;();</span><br><span class="line">            controller.Test();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILog log;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IStorage storage;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Controller</span>(<span class="params">ILog log, IStorage storage</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.storage = storage;</span><br><span class="line">            <span class="keyword">this</span>.log = log;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.log.Log(<span class="string">&quot;开始上传&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.storage.Save(<span class="string">&quot;依赖注入测试&quot;</span>, <span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.log.Log(<span class="string">&quot;上传完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ILog</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">LogImp1</span> : <span class="title">ILog</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;日志<span class="subst">&#123;msg&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetValue</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConfigImp1</span> : <span class="title">IConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetValue</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;\&quot;hello_world\&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IStorage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span>(<span class="params"><span class="built_in">string</span> content, <span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">StorageImp1</span> : <span class="title">IStorage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IConfig config;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StorageImp1</span>(<span class="params">IConfig config</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.config = config;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span>(<span class="params"><span class="built_in">string</span> content, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> service = config.GetValue(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;向服务器<span class="subst">&#123;service&#125;</span>上传文件名为<span class="subst">&#123;name&#125;</span>,其内容为<span class="subst">&#123;content&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置系统">配置系统</h3><p><strong>配置读取顺序</strong></p><p>配置中心服务器----&gt;本地环境变量------&gt;本地配置文件  (后者可将前者覆盖)</p><p><strong>Json文件配置</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WangMC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hobby&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;sport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swimming&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;music&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rock&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>属性设置为 如果较新则复制</p><p>法一: NuGet安装Microsoft.Extensions.Configuration和Microsoft.Extensions.Configuration.Json包</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Channels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> configBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">        configBuilder.AddJsonFile(<span class="string">&quot;config.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> configRoot = configBuilder.Build();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> name = configRoot[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="built_in">string</span> hobby_sport = configRoot.GetSection(<span class="string">&quot;hobby&quot;</span>)[<span class="string">&quot;sport&quot;</span>];</span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Name: <span class="subst">&#123;name&#125;</span>, Age: <span class="subst">&#123;age&#125;</span>, Hobby_sport: <span class="subst">&#123;hobby_sport&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二: 绑定一个类 来进行配置的读取</p><p>NuGet安装Microsoft.Extensions.Configuration.Binder</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration; </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Channels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> configBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">        configBuilder.AddJsonFile(<span class="string">&quot;config.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> configRoot = configBuilder.Build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> config = configRoot.Get&lt;Config&gt;();</span><br><span class="line">        <span class="built_in">string</span> name = config.name;</span><br><span class="line">        <span class="built_in">int</span> age = config.age;</span><br><span class="line">        Hobby hobby = config.hobby;</span><br><span class="line">        <span class="built_in">string</span> sprot = config.hobby.sport;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Config</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Hobby hobby &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Hobby</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> sport &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> music &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><mark>选项方式读取</mark></strong></p><ol><li class="lvl-3"><p>NuGet安装Microsoft.Extensions.Configuration  Microsoft.Extensions.Configuration.Json包</p></li></ol><p>Microsoft.Extensions.Configuration.Options  Microsoft.Extensions.Configuration.Binder</p><ol start="2"><li class="lvl-3"><p>读取配置时, DI要声明IOptions<T> IOptionsMonitor<T> IOptionsSnapshot<T>等类型</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>IOptions<T>不会读取到新的值</p></li><li class="lvl-2"><p>==IOptionsSnapshot<T>==与IOptionsMonitor<T> 相比,IOptionsSnapshot<T>读取到的值会在同一个范围中保持一致</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration; </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Options;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">        services.AddScoped&lt;TestController&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> configBuild = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">        configBuild.AddJsonFile(<span class="string">&quot;config.json&quot;</span>,optional:<span class="literal">true</span>,reloadOnChange:<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> configRoot = configBuild.Build();</span><br><span class="line">        services.AddOptions().Configure&lt;Config&gt;(e =&gt; configRoot.Bind(e));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> sp = services.BuildServiceProvider())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">while</span> (i!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> info = sp.GetRequiredService&lt;TestController&gt;();</span><br><span class="line">                info.Test();</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TestController</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IOptionsSnapshot&lt;Config&gt; optConfig;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestController</span>(<span class="params">IOptionsSnapshot&lt;Config&gt; optConfig</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.optConfig=optConfig;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;姓名:<span class="subst">&#123;optConfig.Value.name&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;年龄:<span class="subst">&#123;optConfig.Value.age&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;兴趣爱好:<span class="subst">&#123;optConfig.Value.hobby.sport&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;兴趣爱好:<span class="subst">&#123;optConfig.Value.hobby.music&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Config</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Hobby hobby &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Hobby</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> sport &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> music &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="日志">日志</h3><blockquote><p>级别: Trace&lt;Debug&lt;Information&lt;Warning&lt;Error&lt;Critical</p></blockquote><p><strong>1. 输出到控制台</strong></p><blockquote><p>安装Microsoft.Extensions.Logging  Microsoft.Extensions.Logging.Console</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging.Console</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"></span><br><span class="line">        services.AddLogging(logBuilder =&gt; &#123; </span><br><span class="line">            logBuilder.AddConsole();</span><br><span class="line">            logBuilder.SetMinimumLevel(LogLevel.Trace);</span><br><span class="line">        &#125;);</span><br><span class="line">        services.AddScoped&lt;Demo&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> sp = services.BuildServiceProvider())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> demo = sp.GetRequiredService&lt;Demo&gt;();</span><br><span class="line">            demo.Test();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Demo</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;Demo&gt; logger;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Demo</span>(<span class="params">ILogger&lt;Demo&gt; logger</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            logger.LogWarning(<span class="string">&quot;this is a warning&quot;</span>);</span><br><span class="line">            logger.LogError(<span class="string">&quot;this is a Error&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                File.ReadAllText(<span class="string">&quot;A fake document&quot;</span>);</span><br><span class="line">                logger.LogDebug(<span class="string">&quot;Read Success!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                logger.LogDebug(ex,<span class="string">&quot;Read Failed!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 文本日志</strong></p><blockquote><p>使用NLog包</p></blockquote><p>日志过滤和分类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">xsi:type</span>=<span class="string">&quot;File&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logfile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;c:\temp\console-example.log&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">archiveAboveSize</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">maxArchiveFiles</span>=<span class="string">&quot;3&quot;</span> <span class="attr">maxArchiveDays</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;$&#123;longdate&#125;|$&#123;level&#125;|$&#123;message&#125; |$&#123;all-event-properties&#125; $&#123;exception:format=tostring&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>xsi:type=&quot;File&quot;</code>：指定了目标的类型为<code>File</code>，这意味着日志消息将被写入到文件中。</p></li><li class="lvl-2"><p><code>name=&quot;logfile&quot;</code>：为目标命名，这个名字在整个NLog配置中必须是唯一的，并且可以在日志规则中引用。</p></li><li class="lvl-2"><p><code>fileName=&quot;c:\temp\console-example.log&quot;</code>：指定了日志文件的完整路径。日志消息将被写入到这个文件中。</p></li><li class="lvl-2"><p><code>archiveAboveSize=&quot;10000&quot;</code>：这是一个可选参数，用于指定日志文件的大小阈值。当日志文件达到或超过这个大小时，NLog会将当前日志文件归档，并创建一个新的日志文件继续记录。单位是字节，这里设置为10000字节（大约10KB）。</p></li><li class="lvl-2"><p><code>maxArchiveFiles=&quot;3&quot;</code>：这是一个可选参数，用于指定最大归档文件的数量。当达到这个数量时，NLog将开始删除最旧的归档文件，以便为新归档文件腾出空间。这里设置为3，意味着最多保留3个归档文件。</p></li><li class="lvl-2"><p><code>maxArchiveDays=&quot;30&quot;</code>：其中 <code>X</code> 是一个整数，表示归档文件将被保留的天数。当归档文件创建后经过 <code>X</code> 天，NLog 将自动删除这些归档文件</p></li><li class="lvl-2"><p><code>layout=&quot;$&#123;longdate&#125;|$&#123;level&#125;|$&#123;message&#125; |$&#123;all-event-properties&#125; $&#123;exception:format=tostring&#125;&quot;</code>：定义了日志消息的布局（layout）。布局是一个模板，它指定了日志消息的格式。以下是布局中各个元素的含义：</p><ul class="lvl-2"><li class="lvl-4"><code>$&#123;longdate&#125;</code>：插入日志事件的时间戳。</li><li class="lvl-4"><code>$&#123;level&#125;</code>：插入日志事件的级别（例如：Info、Debug、Error等）。</li><li class="lvl-4"><code>$&#123;message&#125;</code>：插入日志事件的文本消息。</li><li class="lvl-4"><code>$&#123;all-event-properties&#125;</code>：插入所有事件属性的内容。</li><li class="lvl-4"><code>$&#123;exception:format=tostring&#125;</code>：如果日志事件中包含异常信息，则将其转换为字符串并插入到日志消息中。</li></ul></li></ul><p><strong>3.结构化日志</strong></p><blockquote><p>使用Serilog包 安装Serilog.AspNetCore包</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Serilog;</span><br><span class="line"><span class="keyword">using</span> Serilog.Formatting.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IServiceCollection services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"></span><br><span class="line">        services.AddLogging(logBuilder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Log.Logger = <span class="keyword">new</span> LoggerConfiguration().</span><br><span class="line">                             MinimumLevel.Debug().</span><br><span class="line">                             Enrich.FromLogContext().</span><br><span class="line">                             WriteTo.Console(<span class="keyword">new</span> JsonFormatter()).</span><br><span class="line">                             CreateLogger();</span><br><span class="line">        services.AddSerilog();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//services.AddSerilog();</span></span><br><span class="line">        services.AddScoped&lt;Demo&gt;();</span><br><span class="line">        services.AddScoped&lt;Demo1&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> sp = services.BuildServiceProvider())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> demo = sp.GetRequiredService&lt;Demo&gt;();</span><br><span class="line">            <span class="keyword">var</span> demo1 = sp.GetRequiredService&lt;Demo1&gt;();</span><br><span class="line"></span><br><span class="line">            demo1.Test();</span><br><span class="line">            demo.Test();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Demo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;Demo&gt; logger;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Demo</span>(<span class="params">ILogger&lt;Demo&gt; logger</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            logger.LogWarning(<span class="string">&quot;this is a warning&quot;</span>);</span><br><span class="line">            logger.LogError(<span class="string">&quot;this is a Error&quot;</span>);</span><br><span class="line">            logger.LogDebug(<span class="string">&quot;this is a debug&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> Information = <span class="keyword">new</span> &#123; name = <span class="string">&quot;WangMC&quot;</span>, Age = <span class="number">18</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> Hobby = <span class="string">&quot;running&quot;</span>;</span><br><span class="line">            logger.LogDebug(<span class="string">&quot;Hello this is my informaiton &#123;@Information&#125;,my hobby is &#123;Hobby&#125;&quot;</span>, Information, Hobby);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Demo1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;Demo1&gt; logger;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Demo1</span>(<span class="params">ILogger&lt;Demo1&gt; logger</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            logger.LogWarning(<span class="string">&quot;这是一个警告&quot;</span>);</span><br><span class="line">            logger.LogError(<span class="string">&quot;这是一个错误&quot;</span>);</span><br><span class="line">            logger.LogDebug(<span class="string">&quot;这是一个debug&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.集中化日志</strong></p><blockquote><p>适合集群化部署 有N多服务器</p><p>Exceptionless 提供了现成的云服务 也可以本地部署(self hosting)</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/C/">C#</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/C/">C#</category>
      
      
      <comments>https://mengchangwang.github.io/2024/08/08/ASP-NET-Core-%E4%B8%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VS2022 ASP.NET core Web API 示例代码解释</title>
      <link>https://mengchangwang.github.io/2024/07/15/VS2022-ASP-NET-core-Web-API-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A/</link>
      <guid>https://mengchangwang.github.io/2024/07/15/VS2022-ASP-NET-core-Web-API-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A/</guid>
      <pubDate>Mon, 15 Jul 2024 06:48:54 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;关于VS2022提供的天气预报示例代码的一些解释&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>关于VS2022提供的天气预报示例代码的一些解释</p></blockquote> <span id="more"></span><h3 id="0-项目结构">0. 项目结构</h3><p><a href="http://xn--ASP-th2ey4ui5m.NET">在创建ASP.NET</a> Core Web API项目后，项目的基本结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyWebApiProject</span><br><span class="line">│   Controllers</span><br><span class="line">│   └── WeatherForecastController.cs</span><br><span class="line">│   Program.cs</span><br><span class="line">│   WeatherForecast.cs</span><br><span class="line">│   appsettings.json</span><br><span class="line">│   ...</span><br></pre></td></tr></table></figure><h3 id="1-Program-cs">1. <code>Program.cs</code></h3><p>这个文件是应用程序的入口点，负责配置和启动Web服务器。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>WebApplication.CreateBuilder(args)</code>：创建一个Web应用程序构建器。</p></li><li class="lvl-2"><p><code>args</code>：命令行参数。</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddControllers();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>builder.Services</code>：表示依赖注入容器。</p></li><li class="lvl-2"><p><code>AddControllers</code>：向依赖注入容器添加控制器服务。</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>AddEndpointsApiExplorer</code>：用于API文档生成。</p></li><li class="lvl-2"><p><code>AddSwaggerGen</code>：添加Swagger生成器，生成API文档。</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>builder.Build()</code>：构建Web应用程序。</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseDeveloperExceptionPage();</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>app.Environment.IsDevelopment()</code>：检查当前环境是否是开发环境。</p></li><li class="lvl-2"><p><code>UseDeveloperExceptionPage</code>：在开发环境中使用开发者异常页面。</p></li><li class="lvl-2"><p><code>UseSwagger</code>和<code>UseSwaggerUI</code>：启用Swagger中间件，提供API文档UI。</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseHttpsRedirection();</span><br><span class="line">app.UseAuthorization();</span><br><span class="line">app.MapControllers();</span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>UseHttpsRedirection</code>：强制使用HTTPS。</p></li><li class="lvl-2"><p><code>UseAuthorization</code>：启用授权中间件。</p></li><li class="lvl-2"><p><code>MapControllers</code>：将控制器映射到路由。</p></li><li class="lvl-2"><p><code>app.Run()</code>：运行Web应用程序。</p></li></ul><h3 id="2-WeatherForecast-cs">2. <code>WeatherForecast.cs</code></h3><p>这个文件定义了天气预报的数据模型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecast</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TemperatureC &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TemperatureF =&gt; <span class="number">32</span> + (<span class="built_in">int</span>)(TemperatureC / <span class="number">0.5556</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Summary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>Date</code>：表示预报的日期。</p></li><li class="lvl-2"><p><code>TemperatureC</code>：表示摄氏温度。</p></li><li class="lvl-2"><p><code>TemperatureF</code>：表示华氏温度，通过摄氏温度计算得出。</p></li><li class="lvl-2"><p><code>Summary</code>：表示天气总结，可以为空（<code>string?</code>表示可空类型）。</p></li></ul><h3 id="3-WeatherForecastController-cs">3. <code>WeatherForecastController.cs</code></h3><p>这个文件定义了一个控制器类，处理与天气预报相关的HTTP请求。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>using</code>语句：导入命名空间，包含<code>Microsoft.AspNetCore.Mvc</code>用于控制器相关功能。</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyWebApiProject.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Freezing&quot;</span>, <span class="string">&quot;Bracing&quot;</span>, <span class="string">&quot;Chilly&quot;</span>, <span class="string">&quot;Cool&quot;</span>, <span class="string">&quot;Mild&quot;</span>, <span class="string">&quot;Warm&quot;</span>, <span class="string">&quot;Balmy&quot;</span>, <span class="string">&quot;Hot&quot;</span>, <span class="string">&quot;Sweltering&quot;</span>, <span class="string">&quot;Scorching&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">            &#123;</span><br><span class="line">                Date = DateTime.Now.AddDays(index),</span><br><span class="line">                TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">                Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">            &#125;)</span><br><span class="line">            .ToArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="详细解析：">详细解析：</h4><ol><li class="lvl-3"><p><strong><code>[ApiController]</code></strong></p><ul class="lvl-2"><li class="lvl-6">标记该类为API控制器，启用一些自动化功能，如模型验证和路由推断。</li></ul></li><li class="lvl-3"><p><strong><code>[Route(&quot;[controller]&quot;)]</code></strong></p><ul class="lvl-2"><li class="lvl-6">定义控制器的路由模板。<code>[controller]</code>占位符会被控制器名称替换（去掉“Controller”后缀）。</li></ul></li><li class="lvl-3"><p><strong>控制器类</strong>：</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>WeatherForecastController</code>：控制器类，继承自<code>ControllerBase</code>。</li><li class="lvl-6"><code>ControllerBase</code>：提供访问控制器功能的基类，不包含视图支持。</li></ul></li><li class="lvl-3"><p><strong><code>Summaries</code>字段</strong>：</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">定义了一个静态只读数组，包含各种天气总结描述。</li></ul></li><li class="lvl-3"><p><strong>构造函数</strong>：</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger</span>)</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">依赖注入<code>ILogger&lt;WeatherForecastController&gt;</code>实例，用于日志记录。</li></ul></li><li class="lvl-3"><p><strong><code>Get</code>方法</strong>：</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>()</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>[HttpGet]</code>：标记该方法处理HTTP GET请求。</li><li class="lvl-6"><code>Get</code>方法返回一个<code>IEnumerable&lt;WeatherForecast&gt;</code>，生成并返回5天的天气预报数据。</li></ul> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">&#123;</span><br><span class="line">    Date = DateTime.Now.AddDays(index),</span><br><span class="line">    TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">    Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">&#125;)</span><br><span class="line">.ToArray();</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><p>创建一个随机数生成器。</p></li><li class="lvl-6"><p>使用<code>Enumerable.Range</code>生成1到5的整数序列。</p></li><li class="lvl-6"><p>使用<code>Select</code>方法将每个整数转换为一个<code>WeatherForecast</code>对象。</p></li><li class="lvl-6"><p>生成日期为当前日期加上序列中的天数。</p></li><li class="lvl-6"><p>生成随机的摄氏温度和天气总结。</p></li><li class="lvl-6"><p>将结果转换为数组并返回。</p></li></ul></li></ol><h3 id="设计代码结构的建议">设计代码结构的建议</h3><p><a href="http://xn--ASP-lp6e.NET">在ASP.NET</a> Core Web API项目中，将代码分为模型层、控制器层、服务层和数据访问层有助于组织代码，使其更易于维护和扩展。以下是各个层的详细描述以及它们存放的代码类型：</p><h4 id="1-模型层（Models）">1. 模型层（Models）</h4><p>模型层存放数据结构和业务对象，这些对象通常反映了系统的核心业务实体。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>数据模型</strong>：表示数据的结构，如数据库表的实体。</p></li><li class="lvl-2"><p><strong>数据传输对象（DTO）</strong>：用于在客户端和服务器之间传输数据。</p></li><li class="lvl-2"><p><strong>视图模型</strong>：用于将数据从控制器传递到视图（在API中较少使用）。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径：Models/WeatherForecast.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecast</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TemperatureC &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TemperatureF =&gt; <span class="number">32</span> + (<span class="built_in">int</span>)(TemperatureC / <span class="number">0.5556</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Summary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-控制器层（Controllers）">2. 控制器层（Controllers）</h4><p>控制器层包含控制器类，这些类处理HTTP请求并返回响应。控制器通常使用服务层来处理业务逻辑。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>控制器</strong>：处理HTTP请求，调用服务层，并返回响应。</p></li><li class="lvl-2"><p><strong>属性和方法</strong>：处理特定的HTTP请求（如GET、POST、PUT、DELETE）。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径：Controllers/WeatherForecastController.cs</span></span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> MyWebApiProject.Services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyWebApiProject.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IWeatherForecastService _weatherForecastService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">IWeatherForecastService weatherForecastService</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _weatherForecastService = weatherForecastService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _weatherForecastService.GetWeatherForecasts();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-服务层（Services）">3. 服务层（Services）</h4><p>服务层包含业务逻辑和操作，这些逻辑通常涉及多个数据模型或需要复杂的业务规则。服务层从数据访问层获取数据并进行处理。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>服务接口</strong>：定义服务的合同。</p></li><li class="lvl-2"><p><strong>服务实现</strong>：实现服务接口，包含具体的业务逻辑。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径：Services/IWeatherForecastService.cs</span></span><br><span class="line"><span class="keyword">using</span> MyWebApiProject.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IWeatherForecastService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IEnumerable&lt;WeatherForecast&gt; <span class="title">GetWeatherForecasts</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径：Services/WeatherForecastService.cs</span></span><br><span class="line"><span class="keyword">using</span> MyWebApiProject.Models;</span><br><span class="line"><span class="keyword">using</span> MyWebApiProject.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastService</span> : <span class="title">IWeatherForecastService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IWeatherForecastRepository _repository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastService</span>(<span class="params">IWeatherForecastRepository repository</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _repository = repository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">GetWeatherForecasts</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _repository.GetWeatherForecasts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-数据访问层（Data-Access-Layer-DAL）">4. 数据访问层（Data Access Layer, DAL）</h4><p>数据访问层处理与数据库的交互，负责从数据库中检索和存储数据。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>仓储接口</strong>：定义数据访问的合同。</p></li><li class="lvl-2"><p><strong>仓储实现</strong>：实现仓储接口，包含具体的数据访问逻辑。</p></li><li class="lvl-2"><p><strong>数据上下文</strong>：表示数据库连接和操作。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径：Data/IWeatherForecastRepository.cs</span></span><br><span class="line"><span class="keyword">using</span> MyWebApiProject.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IWeatherForecastRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IEnumerable&lt;WeatherForecast&gt; <span class="title">GetWeatherForecasts</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径：Data/WeatherForecastRepository.cs</span></span><br><span class="line"><span class="keyword">using</span> MyWebApiProject.Models;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastRepository</span> : <span class="title">IWeatherForecastRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">GetWeatherForecasts</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这里可以连接数据库并获取数据</span></span><br><span class="line">        <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">        &#123;</span><br><span class="line">            Date = DateTime.Now.AddDays(index),</span><br><span class="line">            TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">            Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">        &#125;)</span><br><span class="line">        .ToArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Freezing&quot;</span>, <span class="string">&quot;Bracing&quot;</span>, <span class="string">&quot;Chilly&quot;</span>, <span class="string">&quot;Cool&quot;</span>, <span class="string">&quot;Mild&quot;</span>, <span class="string">&quot;Warm&quot;</span>, <span class="string">&quot;Balmy&quot;</span>, <span class="string">&quot;Hot&quot;</span>, <span class="string">&quot;Sweltering&quot;</span>, <span class="string">&quot;Scorching&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码结构设计建议">代码结构设计建议</h4><p>以下是一个示例项目的目录结构，以帮助组织各个层的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">MyWebApiProject</span><br><span class="line">│</span><br><span class="line">├── Controllers</span><br><span class="line">│   └── WeatherForecastController.cs</span><br><span class="line">│</span><br><span class="line">├── Models</span><br><span class="line">│   └── WeatherForecast.cs</span><br><span class="line">│</span><br><span class="line">├── Services</span><br><span class="line">│   ├── IWeatherForecastService.cs</span><br><span class="line">│   └── WeatherForecastService.cs</span><br><span class="line">│</span><br><span class="line">├── Data</span><br><span class="line">│   ├── IWeatherForecastRepository.cs</span><br><span class="line">│   └── WeatherForecastRepository.cs</span><br><span class="line">│</span><br><span class="line">├── Program.cs</span><br><span class="line">├── Startup.cs (如果使用Startup类进行配置)</span><br><span class="line">├── appsettings.json</span><br><span class="line">│</span><br><span class="line">└── MyWebApiProject.csproj</span><br></pre></td></tr></table></figure><h4 id="各层的实现原理">各层的实现原理</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>模型层</strong>：定义应用程序的数据结构，表示业务实体和数据传输对象。</p></li><li class="lvl-2"><p><strong>控制器层</strong>：处理HTTP请求，通过调用服务层获取或处理数据，然后返回HTTP响应。</p></li><li class="lvl-2"><p><strong>服务层</strong>：包含业务逻辑，处理复杂的操作和业务规则。通过调用数据访问层获取和存储数据。</p></li><li class="lvl-2"><p><strong>数据访问层</strong>：与数据库或其他数据源交互，执行CRUD（创建、读取、更新、删除）操作，返回数据给服务层。</p></li></ul><p>通过这种分层结构，可以使代码更加模块化、易于维护和测试，同时清晰地分离了各个部分的职责。</p>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/C/">C#</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/C/">C#</category>
      
      
      <comments>https://mengchangwang.github.io/2024/07/15/VS2022-ASP-NET-core-Web-API-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySQL 基础指令</title>
      <link>https://mengchangwang.github.io/2024/06/12/MySQL-%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</link>
      <guid>https://mengchangwang.github.io/2024/06/12/MySQL-%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</guid>
      <pubDate>Wed, 12 Jun 2024 09:36:22 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;介绍了MySQL一些基础指令,增删改查&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>介绍了MySQL一些基础指令,增删改查</p></blockquote><span id="more"></span><h3 id="MySQL">MySQL</h3><h4 id="准备工作">准备工作</h4><ul class="lvl-0"><li class="lvl-2"><p>添加环境变量</p></li><li class="lvl-2"><p>初始化MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="comment">--initialize-insecure</span></span><br></pre></td></tr></table></figure><p>该命令在安全性方面存在缺陷，主要用于开发和测试环境</p></li><li class="lvl-2"><p>注册MySQL服务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld <span class="operator">-</span>install</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>启动/停止 MySQL服务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql</span><br><span class="line"></span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>修改默认账户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin <span class="operator">-</span>u root password xxxx</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>登录MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>pxxxx [<span class="operator">-</span>h数据库服务器IP地址 <span class="operator">-</span>P端口号]</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>卸载MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line"></span><br><span class="line">mysqld <span class="operator">-</span>remove mysql</span><br></pre></td></tr></table></figure></li></ul><h4 id="SQL分类">SQL分类</h4><ul class="lvl-0"><li class="lvl-2"><p><mark>DDL</mark>:Data Definition Language      定义数据库对象</p></li><li class="lvl-2"><p><mark>DML</mark> :Data Manipulation Language   操作数据，进行增删改</p></li><li class="lvl-2"><p><mark>DQL</mark>:Data Query Language                  查询数据库中的记录</p></li><li class="lvl-2"><p><mark>DCL</mark>:Data Control Language                创建数据库的用户，控制访问权限</p></li></ul><h4 id="基础语法">基础语法</h4><blockquote><p>以分号结尾，不区分大小写</p></blockquote><h5 id="DDL">DDL</h5><ul class="lvl-0"><li class="lvl-2"><p>查询数据库</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建数据库</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database filename;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> filename; #如果不存在名为filename的数据库就进行创建</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换数据库</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use filename;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看当前正在使用的数据库</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除数据库</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database filename;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> filename;</span><br></pre></td></tr></table></figure><h6 id="表操作"><mark>表操作</mark></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段类型 [约束] [comment 字段<span class="number">1</span>注解],</span><br><span class="line">    字段<span class="number">2</span> 字段类型 [约束] [comment 字段<span class="number">2</span>注解]</span><br><span class="line">)[comment 表注解];</span><br></pre></td></tr></table></figure><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，<mark>要求非空且唯一</mark></td><td>primary key    （auto_increment自增）</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">creat <span class="keyword">table</span> tb_user(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID，唯一标识&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span> comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;用户表&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当下数据库的表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看指定表结构</span></span><br><span class="line"><span class="keyword">desc</span> tablename;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  查看数据库的建表语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tablename;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为表example 添加字段 qq varchar(11)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> example <span class="keyword">add</span> qq <span class="type">varchar</span>(<span class="number">11</span>) comment <span class="string">&#x27;QQ&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改example 字段类型 qq varchar(13)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> example modify qq <span class="type">varchar</span>(<span class="number">13</span>) comment <span class="string">&#x27;QQ&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改example 字段名qq为qq_num</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> example change qq qq_num <span class="type">varchar</span>(<span class="number">13</span>) comment <span class="string">&#x27;QQ&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除qq_num字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> example <span class="keyword">drop</span> <span class="keyword">column</span> qq_num;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将example 表名修改为hello</span></span><br><span class="line">rename <span class="keyword">table</span> example <span class="keyword">to</span> hello;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 example 表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> eample;</span><br></pre></td></tr></table></figure><h5 id="DML">DML</h5><ul class="lvl-0"><li class="lvl-2"><p>insert语句</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  为 example 表的 username，name，gender 字段插入值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> example(username, name, gender) <span class="keyword">values</span> (<span class="string">&#x27;tinali&#x27;</span>,<span class="string">&#x27; 提纳里&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为 example 表的 所有字段 插入值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> example <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">&#x27;tinali&#x27;</span>,<span class="string">&#x27; 提纳里&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 批量为 example 表的 username，name，gender字段插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> example(username, name, gender) <span class="keyword">values</span> (<span class="string">&#x27;tinali&#x27;</span>,<span class="string">&#x27;提纳里&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;审判官&#x27;</span>,<span class="string">&#x27;那维莱特&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>update语句</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将 example 中ID为1的 name 字段 更新为 张三,username 字段更新为 hello</span></span><br><span class="line"><span class="keyword">update</span> example <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>, username <span class="operator">=</span> <span class="string">&#x27;hello&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将example 中所有 gender 字段改为 1</span></span><br><span class="line"><span class="keyword">update</span> example <span class="keyword">set</span> gender <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>delete语句</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br><span class="line"><span class="comment">-- 删除 example 中ID为1的信息</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> example <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表中所有信息</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> example;</span><br></pre></td></tr></table></figure><h5 id="DQL">DQL</h5><ul class="lvl-0"><li class="lvl-2"><p>基本查询</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询特定字段 name，entrydate 并返回</span></span><br><span class="line"><span class="keyword">select</span> name,entrydate <span class="keyword">from</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询返回所有字段 (通配符)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询特定字段 name，entrydate 并起别名</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> 姓名,entrydate <span class="keyword">as</span> 入职日期 <span class="keyword">from</span> example;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询job字段的记录（不重复）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> example;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>条件查询（<mark>where</mark>）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select 字段列表 from 表名 where 条件列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 name 为 三子曰 的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;三子曰&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 id 小于等于5 的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 job 为空值的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 job 非空值的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 password 不是 123456</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> password <span class="operator">!=</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 age 在 20 到 30 之间的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id 为1，2，3的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)l;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 name 为两个字的记录 （两条下划线）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 name 字段中第一个字为 张 的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span></span><br><span class="line"></span><br><span class="line">_可替代一个字符  <span class="operator">%</span>可替代随机数目的字符</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>分组查询（<mark>groud by</mark>）</p><ul class="lvl-2"><li class="lvl-4">聚合函数 count max min avg sum</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select 聚合函数 from 表名</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 统计 id 字段数的数目</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> example;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select 字段列表 from 表名 [where 条件] group by 分组字段名[having 分组后的过滤的条件];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据 gender 分组，统计男女员工的数量</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> example <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 age 在30（包含）以前的员工，并对job进行分组，获得数量大于等于2的job数据</span></span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> example <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>排序查询（<mark>order by</mark>）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--select 字段列表 from 表名 [where 条件列表][group by 分组字段] order by 字段1 排序方法1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--根据年龄进行升序排序  (降序desc)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>分页查询（<mark>limit</mark>）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select 字段列表 from 表名 limit 起始索引，查询记录数;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从 起始索引为0，开始查询，每夜展示五条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询第一页数据，每页展示五条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询第二，每页展示五条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> example limit <span class="number">5</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://mengchangwang.github.io/2024/06/12/MySQL-%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>身份证号码简易识别(opencv + Qt)</title>
      <link>https://mengchangwang.github.io/2024/05/30/%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81%E7%AE%80%E6%98%93%E8%AF%86%E5%88%AB-opencv-Qt/</link>
      <guid>https://mengchangwang.github.io/2024/05/30/%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81%E7%AE%80%E6%98%93%E8%AF%86%E5%88%AB-opencv-Qt/</guid>
      <pubDate>Thu, 30 May 2024 08:25:12 GMT</pubDate>
      
      <description>&lt;p&gt;记录了一下项目制作过程中 opencv基本API的使用,以及一些基本概念源码可至GitHub查看&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>记录了一下项目制作过程中 opencv基本API的使用,以及一些基本概念源码可至GitHub查看</p> <span id="more"></span><h1>身份证信息识别</h1><h3 id="1-图片的读取-显示">1. 图片的读取 显示</h3><blockquote><p><strong><mark>imread()读取图像</mark></strong>，imread包含两个参数：imread(图像路径， 图像形式)；</p><p><strong><mark>namedWindow()</mark></strong> 用来新建一个显示窗口,用来显示图像,包含两个参数：namedWindow(窗口名称， 窗口形式)</p><p>**<mark>imshow()</mark>**用于显示图像,包含两个参数：imshow(窗口名称，图像名称)</p></blockquote><p><strong>图像形式有三种</strong></p><ul class="lvl-0"><li class="lvl-2"><p>加载彩色图片 (默认加载形式)</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">imread</span>(图像路径， IMREAD_COLOR)；</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">imread</span>(图像路径， <span class="number">1</span>)；</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>加载灰度模式图像</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">imread</span>(图像路径， IMREAD_GRAYSCALE)；</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">imread</span>(图像路径， <span class="number">0</span>)；</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>加载图像,包括alpha通道</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">imread</span>(图像路径，IMREAD_UNCHANGED)；</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">imread</span>(图像路径， <span class="number">-1</span>)；</span><br></pre></td></tr></table></figure><p><strong>窗口形式</strong></p><ul class="lvl-0"><li class="lvl-2"><p>显示的图像大小不能改变（默认形式）</p><p>namedWindow(窗口名称， WINDOW_AUTOSIZE)     1</p></li><li class="lvl-2"><p>图像大小能够调节</p><p>namedWindow(窗口名称， WINDOW_NORMAL)      0</p></li></ul><p><strong>示例代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Mat image;   <span class="comment">//创建一个空图像image</span></span><br><span class="line">image = <span class="built_in">imread</span>(<span class="string">&quot;D://work//c++//Imageprocessing1//企鹅.jpg&quot;</span>);  <span class="comment">//读取文件夹中的图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检测图像是否加载成功</span></span><br><span class="line"><span class="keyword">if</span> (image.<span class="built_in">empty</span>())  <span class="comment">//检测image有无数据，无数据 image.empty()返回 真</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Could not open or find the image&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;IMAGE&quot;</span>);  <span class="comment">//创建显示窗口，不加这行代码，也能显示，默认窗口大小不能改变</span></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;IMAGE&quot;</span>, image);  <span class="comment">//在窗口显示图像</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">imwrite</span>(<span class="string">&quot;1.png&quot;</span>, image); <span class="comment">//保存图像为png格式，文件名称为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);  <span class="comment">//暂停，保持图像显示，等待按键结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-qt中的string转化为opencv中的string">2. qt中的string转化为opencv中的string</h3><blockquote><p>先调用 <code>toLocal8Bit()</code> 方法将 <code>fileName</code> 转换为本地8位编码的 <code>QByteArray</code>，然后再调用 <code>data()</code> 方法获取该 <code>QByteArray</code> 中存储的 C 风格字符串的指针</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ID_card_recognition::read_image</span><span class="params">(<span class="type">const</span> QString&amp; fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString tmpPath = fileName.<span class="built_in">toLocal8Bit</span>().<span class="built_in">data</span>();<span class="comment">//将 fileName 转换为本地8位编码的 C 风格字符串</span></span><br><span class="line">    Mat image;   <span class="comment">//创建一个空图像image</span></span><br><span class="line">    image = <span class="built_in">imread</span>(tmpPath.<span class="built_in">toStdString</span>(), IMREAD_COLOR);  <span class="comment">//读取文件夹中的图像</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-二值化处理">3. 二值化处理</h3><blockquote><p>二值化处理（Binarization）是一种图像处理技术，它将图像中的像素值根据特定的阈值转化为两种值（通常是0和255），从而简化图像的数据表示。</p><p>通常需要<mark>先将图片转换为灰度图像</mark>再进行二值化处理</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>void threshold(InputArray src, OutputArray dst, double thresh, double maxval, int type);</strong></p></li></ul><blockquote><p><code>threshold()</code> 函数是 OpenCV 中用于图像二值化的函数，它将输入图像的像素值根据指定的阈值进行分割，生成一个二值化图像</p></blockquote><ol><li class="lvl-3"><p><mark>cv::THRESH_BINARY</mark>：如果源图像像素值大于阈值，则输出图像的对应像素值设置为<code>maxval</code>，否则设置为0。</p></li><li class="lvl-3"><p><mark>cv::THRESH_BINARY_INV</mark>：与<code>THRESH_BINARY</code>相反，如果源图像像素值大于阈值，则输出图像的对应像素值设置为0，否则设置为<code>maxval</code>。</p></li><li class="lvl-3"><p><code>cv::THRESH_TRUNC</code>：如果源图像像素值大于阈值，则输出图像的对应像素值设置为阈值<code>thresh</code>，否则保持源图像的像素值不变。</p></li><li class="lvl-3"><p><code>cv::THRESH_TOZERO</code>：如果源图像像素值大于阈值，则输出图像的对应像素值保持不变，否则设置为0。</p></li><li class="lvl-3"><p><code>cv::THRESH_TOZERO_INV</code>：与<code>THRESH_TOZERO</code>相反，如果源图像像素值大于阈值，则输出图像的对应像素值设置为0，否则保持源图像的像素值不变。</p></li><li class="lvl-3"><p><code>cv::THRESH_MASK</code>：这是一个掩码值，用于与上述其他值进行按位或操作，以保持旧的OpenCV兼容性。</p></li><li class="lvl-3"><p><code>cv::THRESH_OTSU</code>：在使用<code>THRESH_BINARY</code>或<code>THRESH_BINARY_INV</code>阈值类型时，这个标志可以自动选择最优的阈值。它会计算源图像的直方图，并使用大津二值化方法来找到将图像分为两个类别的最佳阈值。</p></li><li class="lvl-3"><p><code>cv::THRESH_TRIANGLE</code>：这是另一个自动选择阈值的标志，它使用三角形方法来找到最优阈值，这种方法通常比大津方法更快，但在某些情况下可能不如大津方法准确。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读取灰度图像</span></span><br><span class="line">    Mat image = <span class="built_in">imread</span>(<span class="string">&quot;image.jpg&quot;</span>, IMREAD_GRAYSCALE);</span><br><span class="line">    <span class="keyword">if</span> (image.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Could not open or find the image&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置阈值和最大值</span></span><br><span class="line">    <span class="type">int</span> thresh_value = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max_value = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 应用二值化</span></span><br><span class="line">    Mat binary_image;</span><br><span class="line"> <span class="built_in">threshold</span>(image, binary_image, thresh_val, max_value, THRESH_BINARY | THRESH_OTSU);</span><br><span class="line">    <span class="comment">/*THRESH_BINARY：大于阈值的像素赋值为 maxval，小于等于阈值的像素赋值为 0。</span></span><br><span class="line"><span class="comment">    THRESH_OTSU可以实现 Otsu&#x27;s 二值化方法，即自动选择最优的阈值，而无需手动指定阈值</span></span><br><span class="line"><span class="comment">    二者通常结合使用  使用Otsu&#x27;s时thresh 参数可以设置为 0，因为该值不会被实际使用*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示结果</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Binary Image&quot;</span>, binary_image);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">destroyAllWindows</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-双边滤波">4. 双边滤波</h3><blockquote><p>双边滤波（Bilateral Filter）是一种非线性滤波技术，它能够在保持边缘清晰的同时有效地去除图像中的噪声</p></blockquote><p><strong>void bilateralFilter(InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType = BORDER_DEFAULT);</strong></p><ul class="lvl-0"><li class="lvl-2"><p><code>d</code>：滤波器的直径。如果为 -1，则根据 <code>sigmaSpace</code> 自动计算。</p></li><li class="lvl-2"><p><code>sigmaColor</code>：颜色空间的标准差，较大的值表示颜色空间中更大的像素距离将相互混合。</p></li><li class="lvl-2"><p><code>sigmaSpace</code>：空间域的标准差，较大的值表示在空间域内的像素距离将相互混合。</p></li><li class="lvl-2"><p><code>borderType</code>：用于处理边界的类型，默认为 <code>BORDER_DEFAULT</code>。</p></li></ul><h3 id="5-查找轮廓">5.  查找轮廓</h3><blockquote><p>轮廓可以看作是将具有相同颜色或灰度值的所有连续点（沿着边界）连接起来的曲线</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cv::findContours</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    InputOutputArray image,</span></span></span><br><span class="line"><span class="params"><span class="function">    OutputArrayOfArrays contours,</span></span></span><br><span class="line"><span class="params"><span class="function">    OutputArray hierarchy,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> mode,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> method,</span></span></span><br><span class="line"><span class="params"><span class="function">    Point offset = Point()</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">//在黑色背景中寻找白色轮廓</span></span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p><strong>image</strong>：输入图像（8位单通道图像），也是输出图像。</p><ul class="lvl-2"><li class="lvl-5">图像必须是二值化图像（通常通过 <code>cv::threshold</code> 或 <code>cv::Canny</code> 等方法预处理）。</li><li class="lvl-5">该函数会修改输入图像，建议在调用该函数之前对图像进行备份。</li></ul></li><li class="lvl-3"><p><strong>contours</strong>：输出参数，用于存储检测到的轮廓。</p><ul class="lvl-2"><li class="lvl-5">轮廓存储为点的向量的向量，每个轮廓是一个 <code>std::vector&lt;cv::Point&gt;</code> 类型的对象。</li></ul></li><li class="lvl-3"><p><strong>hierarchy</strong>：输出参数，用于存储每个轮廓的层次结构信息。</p><ul class="lvl-2"><li class="lvl-5">这是一个 <code>std::vector&lt;cv::Vec4i&gt;</code> 类型的向量。</li><li class="lvl-5"><code>hierarchy[i][0]</code> 表示后一个轮廓的索引。</li><li class="lvl-5"><code>hierarchy[i][1]</code> 表示前一个轮廓的索引。</li><li class="lvl-5"><code>hierarchy[i][2]</code> 表示父轮廓的索引。</li><li class="lvl-5"><code>hierarchy[i][3]</code> 表示第一个子轮廓的索引。</li></ul></li><li class="lvl-3"><p><strong>mode</strong>：轮廓检索模式，决定轮廓的提取方式和层次结构。</p><ul class="lvl-2"><li class="lvl-5"><code>cv::RETR_EXTERNAL</code>：只检索最外层的轮廓。</li><li class="lvl-5"><code>cv::RETR_LIST</code>：检索所有轮廓，但不建立层次结构。</li><li class="lvl-5"><code>cv::RETR_CCOMP</code>：检索所有轮廓并将它们组织成两级层次结构。</li><li class="lvl-5"><code>cv::RETR_TREE</code>：检索所有轮廓并重建嵌套轮廓的完整层次结构。</li></ul></li><li class="lvl-3"><p><strong>method</strong>：轮廓近似方法，决定如何存储轮廓点。</p><ul class="lvl-2"><li class="lvl-5"><code>cv::CHAIN_APPROX_NONE</code>：存储所有轮廓点。</li><li class="lvl-5"><code>cv::CHAIN_APPROX_SIMPLE</code>：压缩水平、垂直和对角线段，只保留它们的端点。</li><li class="lvl-5"><code>cv::CHAIN_APPROX_TC89_L1</code> 和 <code>cv::CHAIN_APPROX_TC89_KCOS</code>：使用 Teh-Chin 链近似算法。</li></ul></li><li class="lvl-3"><p><strong>offset</strong>（可选）：可选参数，用于对输出的轮廓点坐标进行偏移，默认为 <code>(0, 0)</code>。</p></li></ol><h3 id="6-绘制轮廓">6. 绘制轮廓</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cv::drawContours</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    InputOutputArray image,</span></span></span><br><span class="line"><span class="params"><span class="function">    InputArrayOfArrays contours,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> contourIdx,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> Scalar&amp; color,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> thickness = <span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> lineType = LINE_8,</span></span></span><br><span class="line"><span class="params"><span class="function">    InputArray hierarchy = noArray(),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> maxLevel = INT_MAX,</span></span></span><br><span class="line"><span class="params"><span class="function">    Point offset = Point()</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p><strong>image</strong>：输入输出参数，用于绘制轮廓的图像。</p><ul class="lvl-2"><li class="lvl-5">类型为 <code>cv::InputOutputArray</code>，通常为 <code>cv::Mat</code> 类型。</li><li class="lvl-5">这是一个修改后的图像，轮廓会被绘制在该图像上。</li></ul></li><li class="lvl-3"><p><strong>contours</strong>：输入参数，表示轮廓的集合。</p><ul class="lvl-2"><li class="lvl-5">类型为 <code>cv::InputArrayOfArrays</code>，通常是 <code>std::vector&lt;std::vector&lt;cv::Point&gt;&gt;</code> 类型。</li><li class="lvl-5">每个轮廓都是一个点的集合，表示图像中的一个连通区域。</li></ul></li><li class="lvl-3"><p><strong>contourIdx</strong>：输入参数，指定绘制哪个轮廓的索引。</p><ul class="lvl-2"><li class="lvl-5">如果为负值（例如 <code>-1</code>），则绘制所有轮廓。</li></ul></li><li class="lvl-3"><p><strong>color</strong>：输入参数，指定绘制轮廓的颜色。</p><ul class="lvl-2"><li class="lvl-5">类型为 <code>cv::Scalar</code>，例如 <code>cv::Scalar(0, 255, 0)</code> 表示绿色。</li></ul></li><li class="lvl-3"><p><strong>thickness</strong>（可选）：输入参数，指定绘制轮廓的线条粗细。</p><ul class="lvl-2"><li class="lvl-5">默认值为 <code>1</code>。</li><li class="lvl-5">如果值为 <code>FILLED</code> 或负值，则填充整个轮廓。</li></ul></li><li class="lvl-3"><p><strong>lineType</strong>（可选）：输入参数，指定线条的类型。</p><ul class="lvl-2"><li class="lvl-5">默认值为 <code>cv::LINE_8</code>，表示 8-连接线。</li><li class="lvl-5">可以为 <code>cv::LINE_4</code>（4-连接线）或 <code>cv::LINE_AA</code>（抗锯齿线）。</li></ul></li><li class="lvl-3"><p><strong>hierarchy</strong>（可选）：输入参数，指定轮廓的层次结构。</p><ul class="lvl-2"><li class="lvl-5">类型为 <code>cv::InputArray</code>，通常是 <code>std::vector&lt;cv::Vec4i&gt;</code> 类型。</li><li class="lvl-5">如果不需要层次结构，可以传递 <code>cv::noArray()</code>。</li></ul></li><li class="lvl-3"><p><strong>maxLevel</strong>（可选）：输入参数，指定绘制轮廓的最大层次。</p><ul class="lvl-2"><li class="lvl-5">默认值为 <code>INT_MAX</code>，表示绘制所有层次的轮廓。</li><li class="lvl-5">例如，如果设置为 <code>0</code>，则只绘制最外层的轮廓。</li></ul></li><li class="lvl-3"><p><strong>offset</strong>（可选）：输入参数，指定绘制轮廓时的偏移量。</p><ul class="lvl-2"><li class="lvl-5">类型为 <code>cv::Point</code>，默认值为 <code>cv::Point(0, 0)</code>。</li></ul></li></ol><h3 id="7-绘制轮廓-二">7 绘制轮廓(二)</h3><p><strong>7.1 <code>cv::boundingRect</code> 函数</strong></p><blockquote><p>用于计算给定点集或轮廓的最小边界矩形。这个矩形是完全包含输入轮廓的最小矩形，并且其边与坐标轴对齐。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Rect <span class="title">cv::boundingRect</span><span class="params">(InputArray points)</span></span>;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>points</strong>：输入的点集，可以是一个轮廓（如 <code>std::vector&lt;cv::Point&gt;</code>）或者是 <code>cv::Mat</code> 类型的点集。</p></li></ul><p><strong>返回值</strong></p><ul class="lvl-0"><li class="lvl-2"><p>返回一个 <code>cv::Rect</code> 对象，表示包含所有输入点的最小边界矩形。</p></li></ul><p><strong>7.2 <code>cv::rectangle</code> 函数</strong></p><blockquote><p>用于在图像上绘制矩形。可以根据需要设置矩形的位置、大小、颜色和线条厚度等属性。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cv::rectangle</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    InputOutputArray img,</span></span></span><br><span class="line"><span class="params"><span class="function">    Point pt1,</span></span></span><br><span class="line"><span class="params"><span class="function">    Point pt2,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> Scalar&amp; color,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> thickness = <span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> lineType = LINE_8,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> shift = <span class="number">0</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">或者</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cv::rectangle</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    InputOutputArray img,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> Rect&amp; rec,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> Scalar&amp; color,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> thickness = <span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> lineType = LINE_8,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> shift = <span class="number">0</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>img</strong>：输入输出图像，用于绘制矩形的图像。</p></li><li class="lvl-2"><p><strong>pt1</strong>：矩形的一个顶点。</p></li><li class="lvl-2"><p><strong>pt2</strong>：矩形的对角顶点。</p></li><li class="lvl-2"><p><strong>rec</strong>：表示矩形的 <code>cv::Rect</code> 对象。</p></li><li class="lvl-2"><p><strong>color</strong>：矩形的颜色，使用 <code>cv::Scalar</code> 定义，例如 <code>cv::Scalar(0, 255, 0)</code> 表示绿色。</p></li><li class="lvl-2"><p><strong>thickness</strong>：线条厚度。默认值为 <code>1</code>。如果值为负数（如 <code>FILLED</code>），则填充矩形。</p></li><li class="lvl-2"><p><strong>lineType</strong>：线条类型，可以是 <code>cv::LINE_8</code>、<code>cv::LINE_4</code> 或 <code>cv::LINE_AA</code>。</p></li><li class="lvl-2"><p><strong>shift</strong>：坐标点的小数点位数，默认值为 <code>0</code>。</p></li></ul><p><mark><strong>示例代码</strong></mark></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="comment">// 计算轮廓的最小边界矩形</span></span><br><span class="line">    cv::Rect boundingRect = cv::<span class="built_in">boundingRect</span>(contours[i]);</span><br><span class="line">    <span class="comment">// 在图像上绘制边界矩形</span></span><br><span class="line">    cv::<span class="built_in">rectangle</span>(image, boundingRect, cv::<span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算并标记矩形的中心点</span></span><br><span class="line">    cv::Point center = (boundingRect.<span class="built_in">tl</span>() + boundingRect.<span class="built_in">br</span>()) * <span class="number">0.5</span>;</span><br><span class="line">    cv::<span class="built_in">circle</span>(image, center, <span class="number">5</span>, cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-腐蚀-与-膨胀">8. 腐蚀 与 膨胀</h3><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20240526125045766.png" alt="image-20240526125045766" style="zoom:200%;" /><img data-src="https://cdn.jsdelivr.net/gh/MengChangWang/Blog_Image@main/img/image-20240526125148573.png" alt="image-20240526125148573" style="zoom:200%;" /><h3 id="9-开操作-闭操作">9. 开操作 闭操作</h3><p><strong>开操作</strong>先腐蚀后膨胀的操作称之为开操作。主要用于消除小的物体、在纤细点处分离物体、平滑较大物体的边界，同时并不明显改变其面积。此外，开操作还<mark>可以用于提取水平或竖直的线条</mark></p><p><strong>闭操作</strong>先膨胀后腐蚀 主要用于填充物体内的小空洞、连接邻近物体、平滑其边界，同时并不明显改变其面积 <mark>可以用于填充小的封闭区域</mark></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读取图像</span></span><br><span class="line">    cv::Mat image = cv::<span class="built_in">imread</span>(<span class="string">&quot;path_to_your_image.jpg&quot;</span>, cv::IMREAD_COLOR);</span><br><span class="line">    <span class="keyword">if</span> (image.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;无法读取图像&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示原始图像</span></span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;原始图像&quot;</span>, image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义结构元素，用于开操作和闭操作</span></span><br><span class="line">    cv::Mat kernel = cv::<span class="built_in">getStructuringElement</span>(cv::MORPH_RECT, cv::<span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">/*kernel2 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (10, 10)) # 椭圆结构</span></span><br><span class="line"><span class="comment">kernel3 = cv2.getStructuringElement(cv2.MORPH_CROSS, (10, 10)) # 十字结构*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行开操作</span></span><br><span class="line">    cv::Mat open_result;</span><br><span class="line">    cv::<span class="built_in">morphologyEx</span>(image, open_result, cv::MORPH_OPEN, kernel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示开操作结果</span></span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;开操作结果&quot;</span>, open_result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行闭操作</span></span><br><span class="line">    cv::Mat close_result;</span><br><span class="line">    cv::<span class="built_in">morphologyEx</span>(image, close_result, cv::MORPH_CLOSE, kernel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示闭操作结果</span></span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;闭操作结果&quot;</span>, close_result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待按键后退出</span></span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-模板匹配">10. 模板匹配</h3><p><strong>void matchTemplate(InputArray image, InputArray templ, OutputArray result, int method);</strong></p><ul class="lvl-0"><li class="lvl-2"><p><code>image</code>：输入图像，必须是 8 位或 32 位浮点数。</p></li><li class="lvl-2"><p><code>template</code>：模板图像，必须是相同类型和深度的大小小于或等于输入图像的图像。</p></li><li class="lvl-2"><p><code>result</code>：匹配结果图像，是一个单通道 32 位浮点数。每个像素表示该区域与模板的匹配程度。</p></li><li class="lvl-2"><p><code>method</code>指定的匹配方法，可以是以下之一：</p><ul class="lvl-2"><li class="lvl-4"><code>TM_SQDIFF</code>：平方差匹配法，计算模板与图像之间的平方差，值越小表示匹配度越高。</li><li class="lvl-4"><code>TM_SQDIFF_NORMED</code>：归一化平方差匹配法，计算归一化的平方差，值越小表示匹配度越高。</li><li class="lvl-4"><code>TM_CCORR</code>：相关性匹配法，计算模板与图像之间的相关性，值越大表示匹配度越高。</li><li class="lvl-4"><code>TM_CCORR_NORMED</code>：归一化相关性匹配法，计算归一化的相关性，值越大表示匹配度越高。</li><li class="lvl-4"><code>TM_CCOEFF</code>：相关系数匹配法，计算模板与图像之间的相关系数，值越大表示匹配度越高。</li><li class="lvl-4"><code>TM_CCOEFF_NORMED</code>：归一化相关系数匹配法，计算归一化的相关系数，值越大表示匹配度越高。</li></ul></li></ul><p><em><em>void minMaxLoc(InputArray src, double</em> minVal, double</em> maxVal = 0, Point* minLoc = 0, Point* maxLoc = 0, InputArray mask = noArray());**</p><blockquote><p>用于在给定的矩阵中找到最小值和最大值，并返回它们的位置。这个函数在图像处理中非常有用，尤其是在需要找到图像中的最亮或最暗点、或者在模板匹配中找到最佳匹配位置时</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>src</code>：输入的单通道数组。</p></li><li class="lvl-2"><p><code>minVal</code>：返回最小值的指针（如果不需要，则可以设置为 <code>NULL</code>）。</p></li><li class="lvl-2"><p><code>maxVal</code>：返回最大值的指针（如果不需要，则可以设置为 <code>NULL</code>）。</p></li><li class="lvl-2"><p><code>minLoc</code>：返回最小值位置的指针（如果不需要，则可以设置为 <code>NULL</code>）。</p></li><li class="lvl-2"><p><code>maxLoc</code>：返回最大值位置的指针（如果不需要，则可以设置为 <code>NULL</code>）。</p></li><li class="lvl-2"><p><code>mask</code>：用于选择数组元素的感兴趣区域，如果不需要，则使用 <code>noArray()</code>。</p></li></ul><p><strong>void resize(InputArray src, OutputArray dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR);</strong></p><blockquote><p>缩放图片</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>src</code>：输入图像，可以是任意通道数的 <code>Mat</code> 对象。</p></li><li class="lvl-2"><p><code>dst</code>：输出图像，大小为 <code>dsize</code>，或者与 <code>src</code> 相同类型和大小的 <code>Mat</code> 对象。</p></li><li class="lvl-2"><p><code>dsize</code>：输出图像的大小。如果这个参数为 0，则它由 <code>fx</code> 和 <code>fy</code> 参数决定。</p></li><li class="lvl-2"><p><code>fx</code>：水平方向的缩放比例。如果这个参数为 0，则它由 <code>dsize</code> 参数决定。</p></li><li class="lvl-2"><p><code>fy</code>：垂直方向的缩放比例。如果这个参数为 0，则它由 <code>dsize</code> 参数决定。</p></li><li class="lvl-2"><p><code>interpolation</code>插值方法，用于在缩放时计算新像素值。可选的插值方法包括：</p><ul class="lvl-2"><li class="lvl-4"><code>INTER_NEAREST</code>：最近邻插值。</li><li class="lvl-4"><code>INTER_LINEAR</code>：双线性插值（默认值）。</li><li class="lvl-4"><code>INTER_AREA</code>：使用像素区域关系重采样。当图像缩小时，这种方法可以避免波纹出现，通常用于图像缩放。</li><li class="lvl-4"><code>INTER_CUBIC</code>：三次样条插值。</li><li class="lvl-4"><code>INTER_LANCZOS4</code>：Lanczos 插值，超过 8x8 像素邻域的采样。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ID_number.<span class="built_in">size</span>() != <span class="number">18</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Mat roi = ID_number[i].mat;</span><br><span class="line"><span class="built_in">resize</span>(roi, roi, <span class="built_in">Size</span>(<span class="number">30</span>, <span class="number">40</span>), <span class="number">0</span>, <span class="number">0</span>, INTER_AREA);</span><br><span class="line">Mat gray_image;</span><br><span class="line"><span class="built_in">cvtColor</span>(roi, gray_image, cv::COLOR_BGR2GRAY);</span><br><span class="line">Mat binary_image;</span><br><span class="line"><span class="built_in">threshold</span> (gray_image, binary_image, <span class="number">0</span>, <span class="number">255</span>, THRESH_BINARY_INV | THRESH_OTSU);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> Max = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Mat template_num = templates_cards[j].mat;</span><br><span class="line"><span class="built_in">resize</span>(template_num, template_num, <span class="built_in">Size</span>(<span class="number">30</span>, <span class="number">40</span>), <span class="number">0</span>, <span class="number">0</span>, INTER_AREA);</span><br><span class="line">Mat gray_template_num;</span><br><span class="line"><span class="built_in">cvtColor</span>(template_num, gray_template_num, cv::COLOR_BGR2GRAY);</span><br><span class="line">Mat binary_template_num;</span><br><span class="line"><span class="built_in">threshold</span>(gray_template_num, binary_template_num, <span class="number">0</span>, <span class="number">255</span>, THRESH_BINARY_INV | THRESH_OTSU);</span><br><span class="line"></span><br><span class="line">Mat result;</span><br><span class="line"><span class="built_in">matchTemplate</span>(binary_image, binary_template_num, result, TM_CCOEFF_NORMED);</span><br><span class="line"><span class="type">double</span> minVal, maxVal;</span><br><span class="line">Point minLoc, maxLoc;</span><br><span class="line"></span><br><span class="line"><span class="built_in">minMaxLoc</span>(result, &amp;minVal, &amp;maxVal, &amp;minLoc, &amp;maxLoc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxVal &gt; Max)</span><br><span class="line">&#123;</span><br><span class="line">Max = maxVal;</span><br><span class="line">maxIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result[i] = maxIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://MengChangWang.github.io/categories/C/">C++</category>
      
      
      <category domain="https://MengChangWang.github.io/tags/C/">C++</category>
      
      
      <comments>https://mengchangwang.github.io/2024/05/30/%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E7%A0%81%E7%AE%80%E6%98%93%E8%AF%86%E5%88%AB-opencv-Qt/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
